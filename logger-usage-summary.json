{
  "totalLoggerCalls": 625,
  "filesWithLoggerCalls": [
    "src/shared/errorHandler.ts",
    "src/shared/logger.ts",
    "src/utils/errorHandling.ts",
    "src/utils/errors.ts",
    "src/utils/logger.ts",
    "src/api/server.ts",
    "src/config/index.ts",
    "src/config/monitoring.ts",
    "src/config/secrets.ts",
    "src/core/ai/index.ts",
    "src/core/ai/llmAuditLogger.ts",
    "src/core/ai/modelFallback.ts",
    "src/core/ai/openai.ts",
    "src/core/ai/promptTemplate.ts",
    "src/features/auth/services/userCredentialService.ts",
    "src/features/email/services/emailIngestService.ts",
    "src/features/email/services/emailTemplates.ts",
    "src/features/scheduler/services/executePlan.ts",
    "src/features/workflow/services/attachmentParsers.ts",
    "src/index.ts",
    "src/middleware/dbContextMiddleware.ts",
    "src/middleware/monitoringMiddleware.ts",
    "src/middleware/performance.ts",
    "src/migrations/add-api-key-security-fields.ts",
    "src/migrations/migrationRunner.ts",
    "src/migrations/run-migrations.ts",
    "src/migrations/run-rls-migration.ts",
    "src/parsers/factory/ParserFactory.ts",
    "src/parsers/implementations/CSVParser.ts",
    "src/parsers/implementations/PDFParser.ts",
    "src/parsers/implementations/XLSXParser.ts",
    "src/parsers/utils/monitoring.ts",
    "src/server/routes/apiKeys.ts",
    "src/server/routes/auth.ts",
    "src/server/routes/emails.ts",
    "src/server/routes/health.ts",
    "src/server/routes/index.ts",
    "src/server/routes/jobs.ts",
    "src/server/routes/monitoring.ts",
    "src/server/routes/schedules.ts",
    "src/server/routes/workflows.ts",
    "src/services/alertMailer.ts",
    "src/services/apiKeyService.ts",
    "src/services/attachmentParsers.ts",
    "src/services/awsKmsService.ts",
    "src/services/bullmqService.ts",
    "src/services/credentialVault.ts",
    "src/services/datadogService.ts",
    "src/services/dbHealthCheck.ts",
    "src/services/emailQueue.ts",
    "src/services/enhancedApiKeyService.ts",
    "src/services/healthCheckScheduler.ts",
    "src/services/healthService.ts",
    "src/services/imapIngestionService.ts",
    "src/services/insightGenerator.ts",
    "src/services/jobQueue.ts",
    "src/services/jobQueueSystem.ts",
    "src/services/kmsEncryptionService.ts",
    "src/services/mailerService.ts",
    "src/services/migrationService.ts",
    "src/services/monitoringService.ts",
    "src/services/openai.ts",
    "src/services/performanceMonitor.ts",
    "src/services/queueManager.ts",
    "src/services/rbacService.ts",
    "src/services/redisHealthCheck.ts",
    "src/services/redisService.ts",
    "src/services/resultsPersistence.ts",
    "src/services/schedulerService.ts",
    "src/services/securityInitializer.ts",
    "src/services/securityMonitoringService.ts",
    "src/services/sentryService.ts",
    "src/services/stepHandlers.ts",
    "src/services/workflowEmailServiceFixed.ts",
    "src/services/workflowService.ts",
    "src/shared/db.ts",
    "src/shared/middleware/rateLimiter.ts",
    "src/shared/middleware/rbacMiddleware.ts",
    "src/utils/circuitBreaker.ts",
    "src/utils/encryption.ts",
    "src/utils/envValidator.ts",
    "src/utils/rateLimiter.ts",
    "src/utils/retry.ts"
  ],
  "callTypeCount": {
    "direct": 479,
    "object": 8,
    "console": 96,
    "other": 42
  },
  "methodCount": {
    "warn": 74,
    "error": 275,
    "unknown": 42,
    "fatal": 2,
    "debug": 21,
    "info": 182,
    "log": 29
  },
  "calls": [
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 42,
      "column": 5,
      "callType": "object",
      "methodName": "warn",
      "code": "logger.warn('Operational error occurred', logContext)"
    },
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 44,
      "column": 5,
      "callType": "object",
      "methodName": "error",
      "code": "logger.error('Unexpected error occurred', logContext)"
    },
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 124,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "process.on('uncaughtException', (error: Error) => {\n    const appError = toAppError(error);\n    logError(appError, { type: 'uncaughtException' });\n    \n    // Consider whether to crash the process or not based on error type\n    if (!appError.isOperational) {\n      logger.fatal('Uncaught exception - Application will exit', { error: appError });\n      process.exit(1);\n    }\n  })"
    },
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 130,
      "column": 7,
      "callType": "object",
      "methodName": "fatal",
      "code": "logger.fatal('Uncaught exception - Application will exit', { error: appError })"
    },
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 135,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "process.on('unhandledRejection', (reason: unknown) => {\n    const appError = toAppError(reason);\n    logError(appError, { type: 'unhandledRejection' });\n    \n    // Consider whether to crash the process or not based on error type\n    if (!appError.isOperational) {\n      logger.fatal('Unhandled rejection - Application will exit', { error: appError });\n      process.exit(1);\n    }\n  })"
    },
    {
      "fileName": "src/shared/errorHandler.ts",
      "line": 141,
      "column": 7,
      "callType": "object",
      "methodName": "fatal",
      "code": "logger.fatal('Unhandled rejection - Application will exit', { error: appError })"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 42,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Failed to write to log file:', error)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 63,
      "column": 3,
      "callType": "console",
      "methodName": "debug",
      "code": "console.debug(`[DEBUG] ${message}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 73,
      "column": 3,
      "callType": "console",
      "methodName": "info",
      "code": "console.info(`[INFO] ${message}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 83,
      "column": 3,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn(`[WARN] ${message}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 94,
      "column": 3,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`[ERROR] ${errorMessage}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 110,
      "column": 3,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`[FATAL] ${message}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 149,
      "column": 3,
      "callType": "console",
      "methodName": "info",
      "code": "console.info(\n    `[INSIGHT RUN] Platform: ${logData.platform!}, Intent: ${logData.promptIntent}, Version: ${logData.promptVersion}`\n  )"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 152,
      "column": 3,
      "callType": "console",
      "methodName": "info",
      "code": "console.info(\n    `[INSIGHT RUN] Duration: ${logData.durationMs}ms, File: ${logData.inputFile || 'direct content'}`\n  )"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 156,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`[INSIGHT RUN] Error: ${logData.error}`)"
    },
    {
      "fileName": "src/shared/logger.ts",
      "line": 158,
      "column": 5,
      "callType": "console",
      "methodName": "info",
      "code": "console.info(`[INSIGHT RUN] Generated ${logData.outputSummary.length} insights`)"
    },
    {
      "fileName": "src/utils/errorHandling.ts",
      "line": 65,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error: ${errorData.message}`, errorData)"
    },
    {
      "fileName": "src/utils/errorHandling.ts",
      "line": 67,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Warning: ${errorData.message}`, errorData)"
    },
    {
      "fileName": "src/utils/errorHandling.ts",
      "line": 129,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Retry attempt ${attempt + 1}/${retries} after ${backoffDelay}ms`, {\n        ...context,\n        errorMessage: getErrorMessage(err),\n        attempt: attempt + 1,\n        maxRetries: retries,\n        backoffDelay,\n      })"
    },
    {
      "fileName": "src/utils/errors.ts",
      "line": 118,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Operational error occurred', logData)"
    },
    {
      "fileName": "src/utils/errors.ts",
      "line": 120,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Unexpected error occurred', logData)"
    },
    {
      "fileName": "src/utils/logger.ts",
      "line": 9,
      "column": 1,
      "callType": "object",
      "methodName": "info",
      "code": "logger.info('Minimal pino logger initialized successfully!')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 29,
      "column": 1,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n  {\n    event: 'server_startup',\n    environment: config.env,\n    timestamp: new Date().toISOString(),\n  },\n  'Server starting with validated configuration'\n)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 39,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('[1/5] Loading configuration...')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 42,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('[2/5] Initializing Express app...')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 54,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('[3/5] Applying middleware...')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 58,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('[4/5] Setting up routes...')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 60,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "(async () => {\n    try {\n      // Initialize monitoring services\n      const monitoringStatus = await monitoringService.initialize();\n      info(`Monitoring services initialized: Sentry=${monitoringStatus.sentryInitialized}, DataDog=${monitoringStatus.datadogInitialized}`);\n\n      // Start performance monitoring\n      import { startPerformanceMonitoring } from '../services/performanceMonitor.js';\n      startPerformanceMonitoring();\n      info('Performance monitoring started');\n\n      // Initialize job queue service\n      await initializeJobQueue();\n      console.log('Job queue initialized');\n\n      // Initialize the task scheduler\n      await initializeScheduler();\n      console.log('Task scheduler initialized');\n\n      // Start health check schedulers\n      startAllHealthChecks();\n      console.log('Health check schedulers started');\n\n      // Initialize email service if SendGrid API key is available\n      if (config.apiKeys.sendgrid) {\n        initializeMailer();\n      } else {\n        console.warn('SendGrid API key not found; email functionality will be limited');\n      }\n\n      // Register authentication and API routes\n      await registerAuthRoutes(app);\n      console.log('Authentication routes registered successfully');\n\n      // Register job management routes\n      app.use('/api/jobs', jobsRouter);\n\n      // Register workflow routes\n      app.use('/api/workflows', workflowsRouter);\n\n      // Register monitoring routes\n      registerMonitoringRoutes(app);\n      console.log('Monitoring routes registered');\n\n      console.log('Job management and workflow routes registered');\n    } catch (err) {\n      console.error('Failed to register routes:', err);\n      // Track err in monitoring service\n      monitoringService.trackError(err, { component: 'server_initialization' }, true);\n    }\n  })()"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 64,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Monitoring services initialized: Sentry=${monitoringStatus.sentryInitialized}, DataDog=${monitoringStatus.datadogInitialized}`)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 69,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Performance monitoring started')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 73,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Job queue initialized')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 77,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Task scheduler initialized')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 81,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Health check schedulers started')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 87,
      "column": 9,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn('SendGrid API key not found; email functionality will be limited')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 92,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Authentication routes registered successfully')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 102,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Monitoring routes registered')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 104,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Job management and workflow routes registered')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 106,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Failed to register routes:', err)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 180,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "app.post('/api/tasks', rateLimiters.taskSubmission, async (req: Request, res: Response) => {\n    try {\n      const { task } = req.body;\n      if (!task || typeof task !== 'string') {\n        return res.status(400).json({ error: 'Task is required and must be a string' });\n      }\n      // Parse the task to determine its type and parameters\n      const parsedTask = await parseTask(task);\n      // Generate task ID\n      const taskId = crypto.randomUUID();\n      // Create the task object and insert into database\n      await db.insert(taskLogs).values({\n        id: taskId,\n        userId: req.user?.claims?.sub,\n        taskType: parsedTask.type,\n        taskText: task,\n        taskData: parsedTask.parameters,\n        status: 'pending',\n      });\n      // Enqueue the task for processing with job queue\n      const jobId = await enqueueJob(taskId);\n      console.log(`Task ${taskId} submitted and enqueued as job ${jobId}`);\n      // Return the task ID\n      return res.status(201).json({\n        id: taskId,\n        jobId: jobId,\n        message: 'Task submitted and enqueued successfully',\n      });\n    } catch (err) {\n      // Use type-safe err handling\n      const errorMessage = isError(err) ? (err instanceof Error ? err.message : String(err)) : String(err);\n      console.error('Error in task submission:', err);\n      return res.status(500).json({\n        err: 'Internal server err',\n        message: err instanceof Error ? isError(err) ? (err instanceof Error ? err.message : String(err)) : String(err) : 'Unknown err',\n      });\n    }\n  })"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 201,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Task ${taskId} submitted and enqueued as job ${jobId}`)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 211,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error in task submission:', err)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 219,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "app.post('/submit-task', rateLimiters.taskSubmission, async (req: Request, res: Response) => {\n    try {\n      const { task } = req.body;\n      if (!task || typeof task !== 'string') {\n        return res.status(400).json({ error: 'Task is required and must be a string' });\n      }\n      // Parse the task to determine its type and parameters\n      const parsedTask = await parseTask(task);\n      // Generate task ID\n      const taskId = crypto.randomUUID();\n      // Create the task object and insert into database\n      await db.insert(taskLogs).values({\n        id: taskId,\n        userId: req.user?.claims?.sub,\n        taskType: parsedTask.type,\n        taskText: task,\n        taskData: parsedTask.parameters,\n        status: 'pending',\n      });\n      // Enqueue the task with high priority (1 is highest)\n      const jobId = await enqueueJob(taskId, 1);\n      console.log(`Direct task ${taskId} submitted and enqueued as job ${jobId}`);\n      // Return the task ID\n      return res.status(201).json({\n        id: taskId,\n        jobId: jobId,\n        message: 'Task submitted for immediate processing',\n      });\n    } catch (err) {\n      // Use type-safe err handling\n      const errorMessage = isError(err) ? (err instanceof Error ? err.message : String(err)) : String(err);\n      console.error('Error in direct task execution:', err);\n      return res.status(500).json({\n        err: 'Internal server err',\n        message: err instanceof Error ? isError(err) ? (err instanceof Error ? err.message : String(err)) : String(err) : 'Unknown err',\n      });\n    }\n  })"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 240,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Direct task ${taskId} submitted and enqueued as job ${jobId}`)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 250,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error in direct task execution:', err)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 260,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('[5/5] Starting server...')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 261,
      "column": 18,
      "callType": "other",
      "methodName": "unknown",
      "code": "app.listen(config.server.port, config.server.host, () => {\n    info(`Server running on ${config.server.host}:${config.server.port}`);\n  }).on('error', (err) => {\n    console.error('Server failed to start:', err);\n    process.exit(1);\n  })"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 262,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Server running on ${config.server.host}:${config.server.port}`)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 264,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Server failed to start:', err)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 269,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "server.on('error', (err) => {\n    console.error('Server failed to start:', err);\n    monitoringService.trackError(err, { component: 'server_startup' }, true);\n  })"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 270,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Server failed to start:', err)"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 276,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('SIGTERM received, shutting down gracefully')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 283,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Server closed')"
    },
    {
      "fileName": "src/api/server.ts",
      "line": 289,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Forced shutdown after timeout')"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 102,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Configuration validation failed:', {\n        issues: err.issues.map(issue => ({\n          path: issue.path.join('.'),\n          message: issue.message\n        }))\n      })"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 109,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to load configuration:', err)"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 114,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Exiting due to invalid configuration in production environment')"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 146,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Email configuration is incomplete. Email functionality may not work correctly.')"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 169,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('OTP email configuration is incomplete. OTP functionality may not work correctly.')"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 195,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Using a default encryption key in production. This is a security risk.')"
    },
    {
      "fileName": "src/config/index.ts",
      "line": 278,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Failed to parse REDIS_URL, using individual settings instead')"
    },
    {
      "fileName": "src/config/monitoring.ts",
      "line": 112,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Monitoring configuration validation failed:', {\n        issues: err.issues.map(issue => ({\n          path: issue.path.join('.'),\n          message: issue.message\n        }))\n      })"
    },
    {
      "fileName": "src/config/monitoring.ts",
      "line": 119,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to load monitoring configuration:', err)"
    },
    {
      "fileName": "src/config/secrets.ts",
      "line": 23,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Using a default encryption key. This is insecure for production use.')"
    },
    {
      "fileName": "src/config/secrets.ts",
      "line": 26,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Default encryption key detected in production environment. This is a security risk.')"
    },
    {
      "fileName": "src/config/secrets.ts",
      "line": 45,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize encryption key for secrets', err)"
    },
    {
      "fileName": "src/core/ai/index.ts",
      "line": 68,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Failed to initialize OpenAI. Some AI features may not work.')"
    },
    {
      "fileName": "src/core/ai/index.ts",
      "line": 81,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize AI core:', err)"
    },
    {
      "fileName": "src/core/ai/llmAuditLogger.ts",
      "line": 64,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to log LLM interaction:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/llmAuditLogger.ts",
      "line": 129,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get LLM usage stats:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/llmAuditLogger.ts",
      "line": 203,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get recent LLM interactions:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/modelFallback.ts",
      "line": 168,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Primary model ${primaryModel.id} failed, trying fallbacks:`, err)"
    },
    {
      "fileName": "src/core/ai/modelFallback.ts",
      "line": 185,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Trying fallback model: ${fallbackModel.id}`)"
    },
    {
      "fileName": "src/core/ai/modelFallback.ts",
      "line": 198,
      "column": 11,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Fallback model ${fallbackModel.id} failed:`, fallbackError)"
    },
    {
      "fileName": "src/core/ai/openai.ts",
      "line": 86,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize OpenAI client:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/openai.ts",
      "line": 112,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize OpenAI client with credential:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/openai.ts",
      "line": 262,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to log completion:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 62,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Created prompts directory: ${PROMPTS_DIR}`)"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 67,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Initialized prompt system with ${promptCache.size} templates`)"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 69,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize prompt system:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 90,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error loading prompt file ${file}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 96,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error loading prompts:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 213,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error loading prompt template ${name}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 278,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error saving prompt template ${template.name}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 300,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Reloaded prompt template: ${file}`)"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 302,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error reloading prompt template ${file}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/core/ai/promptTemplate.ts",
      "line": 307,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error checking for prompt updates:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 77,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Security violation: Attempted to add credentials without proper encryption', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 87,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Using default encryption key in development. Set ENCRYPTION_KEY for production.')"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 125,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error saving credential:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 198,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error loading credential:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 239,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to list user credentials:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 335,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error saving credential:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 397,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error deleting credential:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 461,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to hard delete user credential:', err)"
    },
    {
      "fileName": "src/features/auth/services/userCredentialService.ts",
      "line": 555,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error getting active credential:', err)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 57,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Starting email ingestion for ${platform}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 69,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Fetching emails for ${platform}...`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 75,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Found ${emailResults.length} emails with attachments for ${platform}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 82,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Processing attachment: ${path.basename(filePath)}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 88,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Successfully parsed ${parsedData.recordCount} records from ${path.basename(filePath)}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 92,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Storing results for ${platform}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 104,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Results stored with ID: ${storageResult.id}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 109,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Generating insights for ${platform}`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 114,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Generated ${insights.length} insights`)"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 126,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error processing attachment ${path.basename(filePath)}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/features/email/services/emailIngestService.ts",
      "line": 162,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Email ingestion failed for ${platform}:`, isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/features/email/services/emailTemplates.ts",
      "line": 85,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error generating email template:', error)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 50,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Created new plan in database with ID: ${planId}`)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 54,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Executing step ${i}: ${step.tool}`)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 75,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Created step record with ID: ${stepId}`)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 89,
      "column": 9,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Step ${i} completed successfully`)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 91,
      "column": 9,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error in step ${i}:`, error)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 124,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error executing plan:', error)"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 147,
      "column": 24,
      "callType": "other",
      "methodName": "unknown",
      "code": "processedValue.replace(templateRegex, (_match, stepIndex, propertyPath) => {\n        const index = parseInt(stepIndex, 10);\n        if (index < 0 || index >= stepResults.length) {\n          throw new Error(`Invalid step reference: step${index}`);\n        }\n        let result = stepResults[index].output;\n        // If a property path is specified, traverse the object\n        if (propertyPath) {\n          // Remove leading dot and split by dots\n          const props = propertyPath.substring(1).split('.');\n          // Navigate through the properties\n          try {\n            for (const prop of props) {\n              if (!result || typeof result !== 'object') {\n                throw new Error(`Cannot access property '${prop}' of non-object value`);\n              }\n              result = result[prop];\n            }\n          } catch (e) {\n            console.warn(\n              `Failed to access property path ${propertyPath} in step ${index} output:`,\n              e\n            );\n            // Return empty string for failed property access\n            return '';\n          }\n        }\n        // If the result is an object or array, stringify it\n        if (typeof result === 'object' && result !== null) {\n          return JSON.stringify(result);\n        }\n        return String(result);\n      })"
    },
    {
      "fileName": "src/features/scheduler/services/executePlan.ts",
      "line": 166,
      "column": 13,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn(\n              `Failed to access property path ${propertyPath} in step ${index} output:`,\n              e\n            )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 71,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'parsed_csv_records',\n        file: path.basename(filePath),\n        recordsCount: records.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Parsed CSV records'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 98,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'error_parsing_csv',\n        file: filePath,\n        errorMessage,\n        stack,\n        timestamp: new Date().toISOString(),\n      },\n      'Error parsing CSV file'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 145,
      "column": 9,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn(`Sheet not found: ${sheetName}`)"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 188,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'parsed_excel_records',\n        file: path.basename(filePath),\n        recordsCount: records.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Parsed Excel records'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 215,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'error_parsing_excel',\n        file: filePath,\n        errorMessage,\n        stack,\n        timestamp: new Date().toISOString(),\n      },\n      'Error parsing Excel file'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 248,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'extracted_pdf_text',\n        file: path.basename(filePath),\n        charCount: text.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Extracted PDF text'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 265,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'parsed_pdf_records',\n        source: 'pdfContent',\n        recordsCount: records.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Parsed PDF records'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 292,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'error_parsing_pdf',\n        file: filePath,\n        errorMessage,\n        stack,\n        timestamp: new Date().toISOString(),\n      },\n      'Error parsing PDF file'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 324,
      "column": 7,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn('Could not identify header row in PDF. Using first line as header.')"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 356,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'parsed_pdf_records',\n        source: 'pdfContent',\n        recordsCount: records.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Parsed PDF records'\n    )"
    },
    {
      "fileName": "src/features/workflow/services/attachmentParsers.ts",
      "line": 370,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'error_extracting_pdf_table',\n        errorMessage,\n        stack,\n        timestamp: new Date().toISOString(),\n      },\n      'Error extracting tabular data from PDF'\n    )"
    },
    {
      "fileName": "src/index.ts",
      "line": 9,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "startServer().catch((error: Error) => {\n  console.error('Failed to start server:', error);\n  process.exit(1);\n})"
    },
    {
      "fileName": "src/index.ts",
      "line": 10,
      "column": 3,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Failed to start server:', error)"
    },
    {
      "fileName": "src/middleware/dbContextMiddleware.ts",
      "line": 49,
      "column": 9,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug({\n          event: 'db_context_set',\n          userId,\n          isAdmin,\n          clientIp,\n        }, `Set database context for user ${userId} (admin: ${isAdmin}, IP: ${clientIp})`)"
    },
    {
      "fileName": "src/middleware/dbContextMiddleware.ts",
      "line": 63,
      "column": 9,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug({\n          event: 'db_context_cleared',\n          clientIp,\n        }, `Cleared database context (no authenticated user, IP: ${clientIp})`)"
    },
    {
      "fileName": "src/middleware/dbContextMiddleware.ts",
      "line": 72,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'db_context_error',\n      err: err instanceof Error ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n    }, 'Error setting database context')"
    },
    {
      "fileName": "src/middleware/monitoringMiddleware.ts",
      "line": 61,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`${req.method} ${req.path} ${res.statusCode} ${duration}ms`, {\n      event: 'api_request',\n      method: req.method,\n      path: req.path,\n      status: res.statusCode,\n      duration,\n    })"
    },
    {
      "fileName": "src/middleware/monitoringMiddleware.ts",
      "line": 100,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error in error tracking middleware:',\n      isError(middlewareError) ? middlewareError : String(middlewareError)\n    )"
    },
    {
      "fileName": "src/middleware/monitoringMiddleware.ts",
      "line": 124,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Monitoring middleware registered')"
    },
    {
      "fileName": "src/middleware/performance.ts",
      "line": 88,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n        event: 'slow_request',\n        method: req.method,\n        path: req.path,\n        responseTime,\n        statusCode: res.statusCode,\n      })"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 23,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Starting migration: Add API Key Security Fields')"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 34,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Migration already applied, skipping')"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 57,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Migration completed successfully: Add API Key Security Fields')"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 61,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'migration_error',\n      migration: 'add_api_key_security_fields',\n      err: errorMessage,\n    }, `Migration failed: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 75,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Starting rollback: Add API Key Security Fields')"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 96,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Rollback completed successfully: Add API Key Security Fields')"
    },
    {
      "fileName": "src/migrations/add-api-key-security-fields.ts",
      "line": 100,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'migration_rollback_error',\n      migration: 'add_api_key_security_fields',\n      err: errorMessage,\n    }, `Migration rollback failed: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 43,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_system_initializing',\n      timestamp: new Date().toISOString(),\n    }, '⚙️ Initializing migration system')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 56,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_system_initialized',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      migrationCount: migrations.length,\n      migrations: migrations.map(m => ({\n        id: m.id,\n        name: m.name,\n        timestamp: m.timestamp,\n      })),\n    }, `✅ Migration system initialized in ${totalDuration}ms with ${migrations.length} registered migrations`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 70,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'db_migration_system_initialization_error',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      error: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n    }, '❌ Failed to initialize migration system')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 91,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_pending_migrations_started',\n      timestamp: new Date().toISOString(),\n    }, '🔄 Running pending migrations...')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 123,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'db_migrations_failed',\n        timestamp: new Date().toISOString(),\n        failedCount: failedCount,\n        appliedCount: appliedCount,\n        skippedCount: skippedCount,\n        failedMigrations: results\n          .filter((r) => r.status === 'failed')\n          .map(m => ({\n            id: m.id,\n            name: m.name,\n            error: m.error\n          })),\n      }, `❌ Migration process completed with errors: ${appliedCount} applied, ${failedCount} failed`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 140,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'db_migrations_exit',\n          timestamp: new Date().toISOString(),\n          reason: 'migration_failure',\n          environment: 'production',\n        }, '🛑 Exiting due to migration failures in production environment')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 151,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'db_migrations_applied',\n        timestamp: new Date().toISOString(),\n        count: appliedCount,\n        durationMs: totalDuration,\n      }, `✅ Successfully applied ${appliedCount} migrations in ${totalDuration}ms`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 158,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'db_migrations_none_pending',\n        timestamp: new Date().toISOString(),\n      }, '✅ No migrations to apply')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 168,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'db_migrations_error',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      error: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n    }, '❌ Failed to run migrations')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 188,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_rls_migration_started',\n      timestamp: new Date().toISOString(),\n    }, '🔒 Starting Row Level Security (RLS) migration...')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 198,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n        event: 'db_rls_migration_file_missing',\n        timestamp: new Date().toISOString(),\n        path: sqlPath,\n      }, '⚠️ RLS migration SQL file not found, skipping')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 206,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_rls_migration_file_found',\n      timestamp: new Date().toISOString(),\n      path: sqlPath,\n    }, '📄 Found RLS migration SQL file')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 220,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_rls_migration_statements',\n      timestamp: new Date().toISOString(),\n      statementCount: statements.length,\n    }, `📝 Executing ${statements.length} RLS SQL statements`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 239,
      "column": 9,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug({\n          event: 'db_rls_statement_executed',\n          timestamp: new Date().toISOString(),\n          statementIndex: index,\n          durationMs: statementDuration,\n          statementPreview: statement.substring(0, 50) + (statement.length > 50 ? '...' : ''),\n        }, `✅ Executed SQL statement ${index + 1}/${statements.length} (${statementDuration}ms)`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 250,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'db_rls_statement_error',\n          timestamp: new Date().toISOString(),\n          statementIndex: index,\n          durationMs: statementDuration,\n          error: isError(err) ? err.message : String(err),\n          stack: err instanceof Error ? err.stack : undefined,\n          statementPreview: statement.substring(0, 100) + (statement.length > 100 ? '...' : ''),\n        }, `❌ Error executing SQL statement ${index + 1}/${statements.length}`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 267,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_rls_migration_completed',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      successCount,\n      failureCount,\n      totalStatements: statements.length,\n    }, `✅ RLS migration completed in ${totalDuration}ms (${successCount} succeeded, ${failureCount} failed)`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 278,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'db_rls_migration_error',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      error: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n    }, '❌ Error running RLS migration')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 297,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n    event: 'db_migration_started',\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development',\n  }, '🔄 Database migration process started')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 305,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_initializing',\n      timestamp: new Date().toISOString(),\n    }, '⚙️ Initializing migration system')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 313,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_running_pending',\n      timestamp: new Date().toISOString(),\n    }, '⏳ Running pending migrations')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 325,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_results',\n      timestamp: new Date().toISOString(),\n      applied: appliedCount,\n      skipped: skippedCount,\n      failed: failedCount,\n      migrations: migrationResults.map(r => ({\n        id: r.id,\n        name: r.name,\n        status: r.status,\n        duration: r.duration,\n      })),\n    }, `📊 Migration results: ${appliedCount} applied, ${skippedCount} skipped, ${failedCount} failed`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 340,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_running_rls',\n      timestamp: new Date().toISOString(),\n    }, '🔒 Running Row Level Security (RLS) migration')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 349,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'db_migration_completed',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      success: true,\n    }, `✅ Database migration completed successfully in ${totalDuration}ms`)"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 358,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'db_migration_failed',\n      timestamp: new Date().toISOString(),\n      durationMs: totalDuration,\n      error: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n      environment: process.env.NODE_ENV || 'development',\n    }, '❌ Database migration failed')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 369,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'db_migration_exit',\n        timestamp: new Date().toISOString(),\n        reason: 'migration_failure',\n        environment: 'production',\n      }, '🛑 Exiting due to migration failures in production environment')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 386,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Migration process completed')"
    },
    {
      "fileName": "src/migrations/migrationRunner.ts",
      "line": 390,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Migration process failed', {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 37,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to create migrations table: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 56,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to check migration status: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 73,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to record migration: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 83,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Starting database migrations')"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 95,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Migration already applied: ${name}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 100,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Applying migration: ${name}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 106,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Migration applied successfully: ${name}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 108,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration failed: ${name}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 113,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('All migrations completed successfully')"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 116,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration process failed: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/run-migrations.ts",
      "line": 130,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration failed: ${errorMessage}`)"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 20,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Starting RLS migration...')"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 36,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Executed SQL statement: ${statement.substring(0, 50)}...`)"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 38,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'rls_migration_statement_error',\n          err: err instanceof Error ? err.message : String(err),\n          statement: statement.substring(0, 100),\n        }, 'Error executing SQL statement')"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 49,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('RLS migration completed successfully')"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 51,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'rls_migration_error',\n      err: err instanceof Error ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n    }, 'Error running RLS migration')"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 64,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('RLS migration script completed')"
    },
    {
      "fileName": "src/migrations/run-rls-migration.ts",
      "line": 68,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('RLS migration script failed', error)"
    },
    {
      "fileName": "src/parsers/factory/ParserFactory.ts",
      "line": 203,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error checking for duplicate file', { fileHash, err })"
    },
    {
      "fileName": "src/parsers/factory/ParserFactory.ts",
      "line": 226,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Stored file hash', { fileHash, metadata, expiresAt })"
    },
    {
      "fileName": "src/parsers/factory/ParserFactory.ts",
      "line": 228,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error storing file hash', { fileHash, err })"
    },
    {
      "fileName": "src/parsers/implementations/CSVParser.ts",
      "line": 78,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'parsed_csv_records',\n        file: options._fileName || 'unknown',\n        recordCount: records.length,\n        timestamp: new Date().toISOString(),\n      }, 'Parsed CSV records')"
    },
    {
      "fileName": "src/parsers/implementations/CSVParser.ts",
      "line": 95,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'csv_parser_error',\n        file: options._fileName || 'unknown',\n        err: err instanceof Error ? err.message : String(err),\n        parser: 'CSVParser',\n      })"
    },
    {
      "fileName": "src/parsers/implementations/CSVParser.ts",
      "line": 150,
      "column": 9,
      "callType": "other",
      "methodName": "unknown",
      "code": "parser.on('end', () => {\n          try {\n            // Validate with schema if provided\n            const validatedRecords = this.validateWithSchema(records, options.schema);\n            \n            // Log successful parsing\n            info({\n              event: 'parsed_csv_stream',\n              file: options._fileName || 'unknown',\n              recordCount: validatedRecords.length,\n              timestamp: new Date().toISOString(),\n            }, 'Parsed CSV stream');\n            \n            // Create and return the result\n            resolve(this.createResult(validatedRecords, {\n              ...options,\n              _metadata: {\n                delimiter: options.delimiter || ',',\n                headerRow: options.columns !== false,\n                streaming: true,\n              },\n            }));\n          } catch (err) {\n            reject(err);\n          }\n        })"
    },
    {
      "fileName": "src/parsers/implementations/CSVParser.ts",
      "line": 156,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n              event: 'parsed_csv_stream',\n              file: options._fileName || 'unknown',\n              recordCount: validatedRecords.length,\n              timestamp: new Date().toISOString(),\n            }, 'Parsed CSV stream')"
    },
    {
      "fileName": "src/parsers/implementations/PDFParser.ts",
      "line": 92,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'extracted_pdf_text',\n        file: options._fileName || 'unknown',\n        charCount: text.length,\n        timestamp: new Date().toISOString(),\n      }, 'Extracted PDF text')"
    },
    {
      "fileName": "src/parsers/implementations/PDFParser.ts",
      "line": 118,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'pdf_parser_error',\n        file: options._fileName || 'unknown',\n        err: err instanceof Error ? err.message : String(err),\n        parser: 'PDFParser',\n      })"
    },
    {
      "fileName": "src/parsers/implementations/XLSXParser.ts",
      "line": 122,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'parsed_xlsx_records',\n        file: options._fileName || 'unknown',\n        recordCount: validatedRecords.length,\n        sheetCount: sheetsToProcess.length,\n        timestamp: new Date().toISOString(),\n      }, 'Parsed XLSX records')"
    },
    {
      "fileName": "src/parsers/implementations/XLSXParser.ts",
      "line": 142,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'xlsx_parser_error',\n        file: options._fileName || 'unknown',\n        err: err instanceof Error ? err.message : String(err),\n        parser: 'XLSXParser',\n      })"
    },
    {
      "fileName": "src/parsers/utils/monitoring.ts",
      "line": 76,
      "column": 3,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug({\n    event: 'parser_start',\n    id,\n    fileType,\n    fileName,\n    fileSize,\n    timestamp: new Date().toISOString(),\n  })"
    },
    {
      "fileName": "src/parsers/utils/monitoring.ts",
      "line": 153,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n    event: success ? 'parser_success' : 'parser_failure',\n    id,\n    fileType,\n    fileName,\n    fileSize,\n    duration: `${duration.toFixed(2)}ms`,\n    recordCount,\n    timestamp: new Date().toISOString(),\n    ...(error ? { error } : {}),\n  })"
    },
    {
      "fileName": "src/parsers/utils/monitoring.ts",
      "line": 167,
      "column": 3,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug({\n    event: 'parser_memory_usage',\n    id,\n    fileType,\n    fileName,\n    rss: Math.round(memoryUsage.rss / 1024 / 1024) + 'MB',\n    heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + 'MB',\n    heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + 'MB',\n    external: Math.round(memoryUsage.external / 1024 / 1024) + 'MB',\n    timestamp: new Date().toISOString(),\n  })"
    },
    {
      "fileName": "src/parsers/utils/monitoring.ts",
      "line": 196,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n    event: 'parser_duplicate',\n    fileType,\n    fileName,\n    fileSize,\n    fileHash,\n    timestamp: new Date().toISOString(),\n  })"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 30,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`API Key operation: ${req.method} ${req.path}`, {\n    ip: req.ip,\n    userId: req.user?.claims?.sub,\n    method: req.method,\n    path: req.path,\n  })"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 43,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/', async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const service = req.query.service as string | undefined;\n    const results = await getApiKeys(userId, service);\n\n    res.json(results);\n  } catch (err) {\n    console.error('Error getting API keys:', err);\n    res.status(500).json({ err: 'Failed to retrieve API keys' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 51,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting API keys:', err)"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 59,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/:id', async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const apiKeyId = req.params.id;\n\n    const apiKey = await getApiKeyById(apiKeyId, userId);\n    res.json(apiKey);\n  } catch (err) {\n    console.error('Error getting API key:', err);\n\n    if (err instanceof Error && err.message === 'API key not found or access denied') {\n      return res.status(404).json({ err: 'API key not found or access denied' });\n    }\n\n    res.status(500).json({ err: 'Failed to retrieve API key' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 67,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting API key:', err)"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 81,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/', rateLimiters.apiKeyCreation, async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const { service, keyName, keyValue, label, additionalData, expiresAt } = req.body;\n\n    // Validate required fields\n    if (!service || !keyName || !keyValue) {\n      return res.status(400).json({\n        error: 'Service, key name, and key value are required'\n      });\n    }\n\n    // Create API key\n    const apiKey = await addApiKey(\n      userId,\n      service,\n      keyName,\n      keyValue,\n      {\n        label,\n        additionalData,\n        expiresAt: expiresAt ? new Date(expiresAt) : undefined,\n      }\n    );\n\n    // Return the created API key with masked key value\n    res.status(201).json({\n      id: apiKey.id,\n      service: apiKey.service,\n      keyName: apiKey.keyName,\n      label: apiKey.label,\n      created: apiKey.createdAt,\n    });\n  } catch (err) {\n    console.error('Error creating API key:', err);\n    res.status(500).json({ err: 'Failed to create API key' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 115,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error creating API key:', err)"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 123,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.put('/:id', async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const apiKeyId = req.params.id;\n    const { keyValue, label, additionalData, active, expiresAt } = req.body;\n\n    // Update API key\n    const apiKey = await updateApiKey(\n      apiKeyId,\n      userId,\n      {\n        keyValue,\n        label,\n        additionalData,\n        active,\n        expiresAt: expiresAt ? new Date(expiresAt) : undefined,\n      }\n    );\n\n    res.json({\n      id: apiKey.id,\n      service: apiKey.service,\n      keyName: apiKey.keyName,\n      label: apiKey.label,\n      active: apiKey.active,\n      updated: apiKey.updatedAt,\n    });\n  } catch (err) {\n    console.error('Error updating API key:', err);\n\n    if (err instanceof Error && err.message === 'API key not found or access denied') {\n      return res.status(404).json({ err: 'API key not found or access denied' });\n    }\n\n    res.status(500).json({ err: 'Failed to update API key' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 151,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error updating API key:', err)"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 164,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.delete('/:id', async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const apiKeyId = req.params.id;\n\n    const success = await deleteApiKey(apiKeyId, userId);\n\n    if (success) {\n      res.status(204).end();\n    } else {\n      res.status(404).json({ error: 'API key not found or access denied' });\n    }\n  } catch (err) {\n    console.error('Error deleting API key:', err);\n    res.status(500).json({ err: 'Failed to delete API key' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/apiKeys.ts",
      "line": 177,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error deleting API key:', err)"
    },
    {
      "fileName": "src/server/routes/auth.ts",
      "line": 20,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "authRouter.get(\n  '/user',\n  isAuthenticated,\n  routeHandler(async (req: AuthRequest, res: Response) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        res.status(401).json({ message: 'Unauthorized - User ID not found' });\n        return;\n      }\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: 'User not found' });\n        return;\n      }\n      // Return user without sensitive information\n      const safeUser = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n      };\n      res.json(safeUser);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  })\n)"
    },
    {
      "fileName": "src/server/routes/auth.ts",
      "line": 23,
      "column": 3,
      "callType": "other",
      "methodName": "unknown",
      "code": "routeHandler(async (req: AuthRequest, res: Response) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        res.status(401).json({ message: 'Unauthorized - User ID not found' });\n        return;\n      }\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: 'User not found' });\n        return;\n      }\n      // Return user without sensitive information\n      const safeUser = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n      };\n      res.json(safeUser);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  })"
    },
    {
      "fileName": "src/server/routes/auth.ts",
      "line": 45,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error fetching user:', error)"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 20,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/notifications/:workflowId', async (req: Request, res: Response) => {\n  try {\n    const { workflowId } = req.params;\n    const { recipientEmail, sendOnCompletion, sendOnFailure } = req.body;\n    const result = await configureNotification(workflowId, {\n      recipientEmail,\n      sendOnCompletion,\n      sendOnFailure,\n    });\n    return res.json(result);\n  } catch (error) {\n    console.error('Error configuring notification:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Failed to configure notification',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 31,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error configuring notification:', error)"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 42,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/notifications/:workflowId', async (req: Request, res: Response) => {\n  try {\n    const { workflowId } = req.params;\n    const settings = await getNotificationSettings(workflowId);\n    return res.json(settings);\n  } catch (error) {\n    console.error('Error getting notification settings:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Failed to get notification settings',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 48,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting notification settings:', error)"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 59,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.delete('/notifications/:workflowId', async (req: Request, res: Response) => {\n  try {\n    const { workflowId } = req.params;\n    const result = await deleteNotification(workflowId);\n    return res.json(result);\n  } catch (error) {\n    console.error('Error deleting notification:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Failed to delete notification',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 65,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error deleting notification:', error)"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 76,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/logs/:workflowId', async (req: Request, res: Response) => {\n  try {\n    const { workflowId } = req.params;\n    const logs = await getEmailLogs(workflowId);\n    return res.json(logs);\n  } catch (error) {\n    console.error('Error getting email logs:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Failed to get email logs',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 82,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting email logs:', error)"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 93,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/retry/:emailLogId', async (req: Request, res: Response) => {\n  try {\n    const { emailLogId } = req.params;\n    const result = await retryEmail(emailLogId);\n    return res.json(result);\n  } catch (error) {\n    console.error('Error retrying email:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Failed to retry email',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/emails.ts",
      "line": 99,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error retrying email:', error)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 33,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health summary err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 47,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health checks err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 66,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health check err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 80,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health checks err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 88,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/logs/:checkId', async (req, res) => {\n  try {\n    const { checkId } = req.params;\n    const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 100;\n    const logs = await getHealthLogs(checkId, limit);\n    res.json(logs);\n  } catch (err: unknown) {\n    const message = isError(err) ? err.message : String(err);\n    error(`Health logs err: ${message}`);\n    res.status(500).json({ err: 'Failed to get health logs' });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 96,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health logs err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 117,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Queue health check failed: ${message}`, {\n      event: 'queue_health_check_error',\n      err: message\n    })"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 146,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Health check err: ${message}`)"
    },
    {
      "fileName": "src/server/routes/health.ts",
      "line": 157,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Health monitoring routes registered')"
    },
    {
      "fileName": "src/server/routes/index.ts",
      "line": 22,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Auth, workflow, email, and schedule routes registered')"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 13,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/', isAuthenticated, async (req, res) => {\n  try {\n    const { status, limit } = req.query;\n    const jobs = await listJobs(\n      status as string | undefined,\n      limit ? parseInt(limit as string) : 100\n    );\n    res.json({ jobs });\n  } catch (error) {\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error);\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n        : String(error)\n      : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error)\n          ? error instanceof Error\n            ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n            : String(error)\n          : String(error)\n        : String(error)\n      : String(error);\n    console.error('Error listing jobs:', error);\n    res.status(500).json({\n      error: 'Failed to list jobs',\n      message:\n        error instanceof Error\n          ? isError(error)\n            ? error instanceof Error\n              ? isError(error)\n                ? error instanceof Error\n                  ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n                  : String(error)\n                : String(error)\n              : String(error)\n            : String(error)\n          : 'Unknown error',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 42,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error listing jobs:', error)"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 61,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/:id', isAuthenticated, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const job = await getJobById(id);\n    if (!job) {\n      res.status(404).json({ error: 'Job not found' });\n      return;\n    }\n    // Get associated task information\n    const taskData = await db\n      .select()\n      .from(taskLogs)\n      .where(eq(taskLogs.id, job.taskId || ''));\n    const task = taskData.length > 0 ? taskData[0] : null;\n    res.json({\n      job,\n      task,\n    });\n  } catch (error) {\n    console.error(`Error getting job ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to get job details',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : 'Unknown error',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 80,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error getting job ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 95,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/:id/retry', isAuthenticated, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const success = await retryJob(id);\n    if (!success) {\n      res.status(400).json({ error: 'Failed to retry job' });\n      return;\n    }\n    res.json({\n      message: 'Job retry initiated',\n      jobId: id,\n    });\n  } catch (error) {\n    console.error(`Error retrying job ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to retry job',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : 'Unknown error',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 108,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error retrying job ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 123,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/enqueue/:taskId', isAuthenticated, async (req, res) => {\n  try {\n    const { taskId } = req.params;\n    const { priority } = req.body;\n    // Verify task exists\n    const taskData = await db.select().from(taskLogs).where(eq(taskLogs.id, taskId.toString()));\n    if (taskData.length === 0) {\n      res.status(404).json({ error: 'Task not found' });\n      return;\n    }\n    const jobId = await enqueueJob(taskId, priority || 1);\n    res.json({\n      message: 'Job enqueued successfully',\n      jobId,\n    });\n  } catch (error) {\n    console.error(`Error enqueuing job for task ${req.params.taskId}:`, error);\n    res.status(500).json({\n      error: 'Failed to enqueue job',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : 'Unknown error',\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/jobs.ts",
      "line": 139,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error enqueuing job for task ${req.params.taskId}:`, error)"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 28,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get health summary:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 44,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get health checks:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 60,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to run health checks:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 85,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to run health check:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 96,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/health/logs/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 100;\n    \n    const logs = await getHealthLogs(id, limit);\n    res.json(logs);\n  } catch (err) {\n    error('Failed to get health logs:', isError(err) ? err : String(err));\n    res.status(500).json({\n      err: 'Failed to get health logs',\n      message: isError(err) ? err.message : String(err),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 104,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get health logs:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 121,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get err rate data:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 138,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get performance metrics:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 155,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get database performance metrics:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/server/routes/monitoring.ts",
      "line": 169,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Monitoring routes registered')"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 45,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/', isAuthenticated, async (req: any, res) => {\n  try {\n    // Validate request body\n    const validationResult = createScheduleSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validationResult.error.format(),\n      });\n    }\n    const { intent, platform, cronExpression, workflowId } = validationResult.data;\n    // Create the schedule\n    const schedule = await createSchedule({\n      userId: req.user.claims.sub,\n      intent,\n      platform,\n      cronExpression,\n      workflowId,\n    });\n    res.status(201).json(schedule);\n  } catch (error) {\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error);\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n        : String(error)\n      : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error)\n          ? error instanceof Error\n            ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n            : String(error)\n          : String(error)\n        : String(error)\n      : String(error);\n    console.error('Error creating schedule:', error);\n    res.status(500).json({\n      error: 'Failed to create schedule',\n      message:\n        error instanceof Error\n          ? isError(error)\n            ? error instanceof Error\n              ? isError(error)\n                ? error instanceof Error\n                  ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n                  : String(error)\n                : String(error)\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 86,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error creating schedule:', error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 105,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/', isAuthenticated, async (req: any, res) => {\n  try {\n    // Extract query parameters\n    const status = req.query.status as string;\n    const platform = req.query.platform! as string;\n    const intent = req.query.intent! as string;\n    // List schedules with filtering\n    const schedulesList = await listSchedules({\n      userId: req.user.claims.sub,\n      status,\n      platform,\n      intent,\n    });\n    res.json(schedulesList);\n  } catch (error) {\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error);\n      // Use type-safe error handling\n      const errorMessage = isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n        : String(error)\n      : String(error);\n    // Use type-safe error handling\n    const errorMessage = isError(error)\n      ? error instanceof Error\n        ? isError(error)\n          ? error instanceof Error\n            ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n            : String(error)\n          : String(error)\n        : String(error)\n      : String(error);\n    console.error('Error listing schedules:', error);\n    res.status(500).json({\n      error: 'Failed to list schedules',\n      message:\n        error instanceof Error\n          ? isError(error)\n            ? error instanceof Error\n              ? isError(error)\n                ? error instanceof Error\n                  ? isError(error) ? (error instanceof Error ? isError(error) ? (error instanceof Error ? error.message : String(error)) : String(error) : String(error)) : String(error)\n                  : String(error)\n                : String(error)\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 140,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error listing schedules:', error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 159,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/:id', isAuthenticated, validateScheduleId, async (req: any, res) => {\n  try {\n    const schedule = await getSchedule(req.params.id);\n    if (!schedule) {\n      return res.status(404).json({ error: 'Schedule not found' });\n    }\n    // Check if the schedule belongs to the authenticated user\n    if (schedule.userId! !== req.user.claims.sub) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    res.json(schedule);\n  } catch (error) {\n    console.error(`Error getting schedule ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to get schedule',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 171,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error getting schedule ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 186,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.put('/:id', isAuthenticated, validateScheduleId, async (req: any, res) => {\n  try {\n    // Get the schedule to check ownership\n    const existingSchedule = await getSchedule(req.params.id);\n    if (!existingSchedule) {\n      return res.status(404).json({ error: 'Schedule not found' });\n    }\n    // Check if the schedule belongs to the authenticated user\n    if (existingSchedule.userId! !== req.user.claims.sub) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    // Validate request body\n    const validationResult = updateScheduleSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validationResult.error.format(),\n      });\n    }\n    // Update the schedule\n    const updatedSchedule = await updateSchedule(req.params.id, validationResult.data);\n    res.json(updatedSchedule);\n  } catch (error) {\n    console.error(`Error updating schedule ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to update schedule',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 209,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error updating schedule ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 224,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.delete('/:id', isAuthenticated, validateScheduleId, async (req: any, res) => {\n  try {\n    // Get the schedule to check ownership\n    const existingSchedule = await getSchedule(req.params.id);\n    if (!existingSchedule) {\n      return res.status(404).json({ error: 'Schedule not found' });\n    }\n    // Check if the schedule belongs to the authenticated user\n    if (existingSchedule.userId! !== req.user.claims.sub) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    // Delete the schedule\n    const result = await deleteSchedule(req.params.id);\n    if (result) {\n      res.status(204).end();\n    } else {\n      res.status(500).json({ error: 'Failed to delete schedule' });\n    }\n  } catch (error) {\n    console.error(`Error deleting schedule ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to delete schedule',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 243,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error deleting schedule ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 258,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/:id/retry', isAuthenticated, validateScheduleId, async (req: any, res) => {\n  try {\n    // Get the schedule to check ownership\n    const existingSchedule = await getSchedule(req.params.id);\n    if (!existingSchedule) {\n      return res.status(404).json({ error: 'Schedule not found' });\n    }\n    // Check if the schedule belongs to the authenticated user\n    if (existingSchedule.userId! !== req.user.claims.sub) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    // Only allow retrying failed schedules\n    if (existingSchedule.status !== 'failed') {\n      return res.status(400).json({ error: 'Only failed schedules can be retried' });\n    }\n    // Retry the schedule\n    const updatedSchedule = await retrySchedule(req.params.id);\n    res.json(updatedSchedule);\n  } catch (error) {\n    console.error(`Error retrying schedule ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to retry schedule',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 277,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error retrying schedule ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 292,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/:id/logs', isAuthenticated, validateScheduleId, async (req: any, res) => {\n  try {\n    // Get the schedule to check ownership\n    const existingSchedule = await getSchedule(req.params.id);\n    if (!existingSchedule) {\n      return res.status(404).json({ error: 'Schedule not found' });\n    }\n    // Check if the schedule belongs to the authenticated user\n    if (existingSchedule.userId! !== req.user.claims.sub) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    // Get logs for the schedule\n    const logs = await getScheduleLogs(req.params.id);\n    res.json(logs);\n  } catch (error) {\n    console.error(`Error getting logs for schedule ${req.params.id}:`, error);\n    res.status(500).json({\n      error: 'Failed to get schedule logs',\n      message:\n        error instanceof Error\n          ? error instanceof Error\n            ? error instanceof Error\n              ? (error instanceof Error ? (error instanceof Error ? error.message : String(error)) : String(error))\n              : String(error)\n            : String(error)\n          : String(error),\n    });\n  }\n})"
    },
    {
      "fileName": "src/server/routes/schedules.ts",
      "line": 307,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error getting logs for schedule ${req.params.id}:`, error)"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 17,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/', isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const status = req.query.status as string | undefined;\n    // Access user ID from the user object (if available)\n    const userId = req.user ? (req.user as any).claims?.sub : null;\n    const workflows = await getWorkflows(status, userId);\n    res.json(workflows);\n    return;\n  } catch (error) {\n    console.error('Error getting workflows:', error);\n    res.status(500).json({ error: 'Failed to get workflows' });\n    return;\n  }\n})"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 26,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting workflows:', error)"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 34,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.get('/:id', isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const workflowId = req.params.id;\n    const workflow = await getWorkflow(workflowId);\n    if (!workflow) {\n      res.status(404).json({ error: 'Workflow not found' });\n      return;\n    }\n    const userId = req.user ? (req.user as any).claims?.sub : null;\n    // If userId is provided and doesn't match, deny access\n    if (userId && workflow.userId! && workflow.userId! !== userId) {\n      res.status(403).json({ error: 'Access denied' });\n      return;\n    }\n    res.json(workflow);\n    return;\n  } catch (error) {\n    console.error('Error getting workflow:', error);\n    res.status(500).json({ error: 'Failed to get workflow' });\n    return;\n  }\n})"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 51,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting workflow:', error)"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 59,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/:id/reset', isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const workflowId = req.params.id;\n    const workflow = await getWorkflow(workflowId);\n    if (!workflow) {\n      res.status(404).json({ error: 'Workflow not found' });\n      return;\n    }\n    const userId = req.user ? (req.user as any).claims?.sub : null;\n    // If userId is provided and doesn't match, deny access\n    if (userId && workflow.userId! && workflow.userId! !== userId) {\n      res.status(403).json({ error: 'Access denied' });\n      return;\n    }\n    const resetResult = await resetWorkflow(workflowId);\n    res.json(resetResult);\n    return;\n  } catch (error) {\n    console.error('Error resetting workflow:', error);\n    res.status(500).json({ error: 'Failed to reset workflow' });\n    return;\n  }\n})"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 77,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error resetting workflow:', error)"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 85,
      "column": 1,
      "callType": "other",
      "methodName": "unknown",
      "code": "router.post('/:id/notifications', isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const { emails } = req.body;\n    if (!emails) {\n      res.status(400).json({ error: 'Email addresses are required' });\n      return;\n    }\n    const workflowId = req.params.id;\n    const workflow = await getWorkflow(workflowId);\n    if (!workflow) {\n      res.status(404).json({ error: 'Workflow not found' });\n      return;\n    }\n    const userId = req.user ? (req.user as any).claims?.sub : null;\n    // If userId is provided and doesn't match, deny access\n    if (userId && workflow.userId! && workflow.userId! !== userId) {\n      res.status(403).json({ error: 'Access denied' });\n      return;\n    }\n    // Configure notifications for the workflow\n    const updatedWorkflow = await configureWorkflowNotifications(workflowId, emails);\n    res.json(updatedWorkflow);\n    return;\n  } catch (error) {\n    console.error('Error configuring workflow notifications:', error);\n    res.status(500).json({ error: 'Failed to configure workflow notifications' });\n    return;\n  }\n})"
    },
    {
      "fileName": "src/server/routes/workflows.ts",
      "line": 109,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error configuring workflow notifications:', error)"
    },
    {
      "fileName": "src/services/alertMailer.ts",
      "line": 44,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock sendAdminAlert', { message, severity, options })"
    },
    {
      "fileName": "src/services/alertMailer.ts",
      "line": 60,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock sendImmediateAdminAlert', { message, severity, options })"
    },
    {
      "fileName": "src/services/alertMailer.ts",
      "line": 74,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock configureAlertRecipients', { recipients })"
    },
    {
      "fileName": "src/services/alertMailer.ts",
      "line": 92,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock configureAlertThresholds', { thresholds })"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 45,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Warning: Using default encryption key. Set ENCRYPTION_KEY in production.')"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 83,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error adding API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 127,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error getting API keys: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 167,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error getting API key by ID: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 247,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error updating API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/apiKeyService.ts",
      "line": 273,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error deleting API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/attachmentParsers.ts",
      "line": 49,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock parseByExtension', { filePath, options })"
    },
    {
      "fileName": "src/services/attachmentParsers.ts",
      "line": 82,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock parseCSV', { filePath, options })"
    },
    {
      "fileName": "src/services/attachmentParsers.ts",
      "line": 112,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock parseExcel', { filePath, options })"
    },
    {
      "fileName": "src/services/attachmentParsers.ts",
      "line": 142,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock parsePDF', { filePath, options })"
    },
    {
      "fileName": "src/services/awsKmsService.ts",
      "line": 32,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock initializeKmsService', { options })"
    },
    {
      "fileName": "src/services/awsKmsService.ts",
      "line": 43,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock createKey', { description })"
    },
    {
      "fileName": "src/services/awsKmsService.ts",
      "line": 55,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock scheduleKeyDeletion', { keyId, pendingWindowInDays })"
    },
    {
      "fileName": "src/services/awsKmsService.ts",
      "line": 71,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock logSecurityEvent', { eventType, userId, details, severity })"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 100,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'redis_connection_error',\n        errorMessage: err.message,\n        timestamp: new Date().toISOString(),\n      }, `Redis connection error: ${err.message}`)"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 109,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'redis_connected',\n      timestamp: new Date().toISOString(),\n    }, 'Redis connection established')"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 116,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n      event: 'redis_connection_failed',\n      errorMessage: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n      timestamp: new Date().toISOString(),\n    }, 'Redis connection failed, using in-memory mode')"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 153,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Created queue: ${queueName}`, {\n    event: 'queue_created',\n    queueName,\n    timestamp: new Date().toISOString(),\n  })"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 188,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Created scheduler for queue: ${queueName}`, {\n    event: 'scheduler_created',\n    queueName,\n    timestamp: new Date().toISOString(),\n  })"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 217,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'scheduler_closed',\n        queueName: name,\n        timestamp: new Date().toISOString(),\n      }, `Closed scheduler for queue: ${name}`)"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 227,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'queue_closed',\n        queueName: name,\n        timestamp: new Date().toISOString(),\n      }, `Closed queue: ${name}`)"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 237,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'worker_closed',\n        workerName: name,\n        timestamp: new Date().toISOString(),\n      }, `Closed worker: ${name}`)"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 247,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n        event: 'redis_connection_closed',\n        timestamp: new Date().toISOString(),\n      }, 'Redis connection closed')"
    },
    {
      "fileName": "src/services/bullmqService.ts",
      "line": 253,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'close_connections_error',\n      errorMessage: isError(err) ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n      timestamp: new Date().toISOString(),\n    }, 'Error closing connections')"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 52,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Credential not found: ${id} for user ${userId}`)"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 61,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get credential by ID:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 87,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Using default encryption key. Set ENCRYPTION_KEY in production.')"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 108,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Credential added for user ${userId} on platform ${platform}`)"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 111,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to add credential:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/credentialVault.ts",
      "line": 147,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get credentials:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 32,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('DataDog API key not provided, metrics tracking disabled')"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 38,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('DataDog initialized successfully')"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 43,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize DataDog', {\n      event: 'datadog_init_error',\n      error: caughtError.message,\n      stack: caughtError.stack\n    })"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 60,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`DataDog not initialized, skipping metric: ${name}`)"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 75,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to flush metrics buffer', {\n        event: 'datadog_flush_error',\n        error: err instanceof Error ? err.message : String(err),\n      })"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 191,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Flushed ${metricsBuffer.length} metrics to DataDog`)"
    },
    {
      "fileName": "src/services/datadogService.ts",
      "line": 199,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to flush metrics to DataDog', {\n      event: 'datadog_flush_error',\n      error: caughtError.message,\n      stack: caughtError.stack\n    })"
    },
    {
      "fileName": "src/services/dbHealthCheck.ts",
      "line": 25,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('PostgreSQL health check: OK', { duration: responseTime })"
    },
    {
      "fileName": "src/services/dbHealthCheck.ts",
      "line": 41,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('PostgreSQL health check failed', {\n      error: errorMessage,\n      stack: err instanceof Error ? err.stack : undefined,\n      duration: responseTime,\n    })"
    },
    {
      "fileName": "src/services/emailQueue.ts",
      "line": 52,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'email_queue_process_error',\n          ...formatError(error),\n        })"
    },
    {
      "fileName": "src/services/emailQueue.ts",
      "line": 94,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n            event: 'email_sent',\n            emailId: email.id,\n            recipient: email.recipientEmail,\n          })"
    },
    {
      "fileName": "src/services/emailQueue.ts",
      "line": 145,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n            event: 'email_send_error',\n            emailId: email.id,\n            recipient: email.recipientEmail,\n            attempt: attempts,\n            maxAttempts: email.maxAttempts,\n            ...formatError(err),\n          })"
    },
    {
      "fileName": "src/services/emailQueue.ts",
      "line": 208,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n            event: 'email_queue_retry_error',\n            emailId: id,\n            ...formatError(error),\n          })"
    },
    {
      "fileName": "src/services/emailQueue.ts",
      "line": 217,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n        event: 'email_retry_error',\n        emailId: id,\n        ...formatError(err),\n      })"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 52,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Warning: Using default encryption key. Set ENCRYPTION_KEY in production.')"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 107,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_key_creation_error',\n      err: errorMessage,\n      userId,\n      service,\n      keyName,\n    }, `Error adding API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 176,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_keys_retrieval_error',\n      err: errorMessage,\n      userId,\n      service,\n    }, `Error getting API keys: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 246,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_key_retrieval_error',\n      err: errorMessage,\n      userId,\n      apiKeyId: id,\n    }, `Error getting API key by ID: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 369,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_key_update_error',\n      err: errorMessage,\n      userId,\n      apiKeyId: id,\n    }, `Error updating API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/enhancedApiKeyService.ts",
      "line": 432,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_key_deletion_error',\n      err: errorMessage,\n      userId,\n      apiKeyId: id,\n    }, `Error deleting API key: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 33,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'health_check_scheduler_invalid_cron',\n      schedule,\n      timestamp: new Date().toISOString(),\n    }, `Invalid cron expression for health check scheduler: ${schedule}`)"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 41,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n      event: 'health_check_scheduler_fallback',\n      schedule,\n      timestamp: new Date().toISOString(),\n    }, `Falling back to default schedule: ${schedule}`)"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 50,
      "column": 23,
      "callType": "other",
      "methodName": "unknown",
      "code": "cron.schedule(schedule, async () => {\n      try {\n        info({\n          event: 'health_check_scheduler_running',\n          schedule,\n          timestamp: new Date().toISOString(),\n        }, 'Running scheduled health checks');\n        \n        // Run all health checks\n        const results = await runAllHealthChecks();\n        \n        // Log the results\n        const statuses = {\n          ok: results.filter(r => r.status === 'ok').length,\n          warning: results.filter(r => r.status === 'warning').length,\n          error: results.filter(r => r.status === 'error').length,\n        };\n        \n        info({\n          event: 'health_check_scheduler_completed',\n          schedule,\n          checks: results.length,\n          statuses,\n          timestamp: new Date().toISOString(),\n        }, `Completed scheduled health checks: ${statuses.ok} ok, ${statuses.warning} warnings, ${statuses.error} errors`);\n      } catch (err) {\n        // Log error but don't stop the scheduler\n        error({\n          event: 'health_check_scheduler_error',\n          schedule,\n          error: err instanceof Error ? err.message : String(err),\n          stack: err instanceof Error ? err.stack : undefined,\n          timestamp: new Date().toISOString(),\n        }, 'Error running scheduled health checks');\n      }\n    }, {\n      scheduled: true,\n      timezone: 'UTC', // Use UTC to avoid timezone issues\n    })"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 52,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n          event: 'health_check_scheduler_running',\n          schedule,\n          timestamp: new Date().toISOString(),\n        }, 'Running scheduled health checks')"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 68,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n          event: 'health_check_scheduler_completed',\n          schedule,\n          checks: results.length,\n          statuses,\n          timestamp: new Date().toISOString(),\n        }, `Completed scheduled health checks: ${statuses.ok} ok, ${statuses.warning} warnings, ${statuses.error} errors`)"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 77,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'health_check_scheduler_error',\n          schedule,\n          error: err instanceof Error ? err.message : String(err),\n          stack: err instanceof Error ? err.stack : undefined,\n          timestamp: new Date().toISOString(),\n        }, 'Error running scheduled health checks')"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 93,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'health_check_scheduler_started',\n      schedule,\n      timestamp: new Date().toISOString(),\n    }, `Health check scheduler started with schedule: ${schedule}`)"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 99,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'health_check_scheduler_start_error',\n      schedule,\n      error: err instanceof Error ? err.message : String(err),\n      stack: err instanceof Error ? err.stack : undefined,\n      timestamp: new Date().toISOString(),\n    }, 'Error starting health check scheduler')"
    },
    {
      "fileName": "src/services/healthCheckScheduler.ts",
      "line": 120,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'health_check_scheduler_stopped',\n      schedule: currentSchedule,\n      timestamp: new Date().toISOString(),\n    }, 'Health check scheduler stopped')"
    },
    {
      "fileName": "src/services/healthService.ts",
      "line": 43,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Registered health check: ${name}`)"
    },
    {
      "fileName": "src/services/healthService.ts",
      "line": 156,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error storing health check result:', error)"
    },
    {
      "fileName": "src/services/imapIngestionService.ts",
      "line": 61,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Fetching emails with attachments', {\n      platform,\n      downloadDir,\n      batchSize: options.batchSize,\n      maxResults: options.maxResults,\n      markSeen: options.markSeen,\n    })"
    },
    {
      "fileName": "src/services/imapIngestionService.ts",
      "line": 105,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to fetch emails with attachments', {\n      platform,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/imapIngestionService.ts",
      "line": 132,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Configuring IMAP connection', {\n      host: options.host,\n      port: options.port,\n      user: options.user,\n      tls: options.tls,\n    })"
    },
    {
      "fileName": "src/services/imapIngestionService.ts",
      "line": 149,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to configure IMAP connection', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 49,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Generating insights', {\n      reportId,\n      platform: options.platform,\n      reportType: options.reportType,\n      audience: options.audience,\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 84,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to generate insights', {\n      reportId,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 103,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Getting insights', {\n      reportId,\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 132,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get insights', {\n      reportId,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 151,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Deleting insights', {\n      reportId,\n    })"
    },
    {
      "fileName": "src/services/insightGenerator.ts",
      "line": 162,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to delete insights', {\n      reportId,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 102,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Redis client error: ' + err.message)"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 106,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize Redis client: ' + errorMessage)"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 130,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize queue scheduler: ' + errorMessage)"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 143,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('BullMQ initialized with Redis connection', { event: 'bullmq_initialized', timestamp: new Date().toISOString() })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 148,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Failed to initialize BullMQ, falling back to in-memory queue: ${errorMessage}`, {\n      event: 'bullmq_initialization_failed',\n      errorMessage,\n      stack: errorStack,\n      timestamp: new Date().toISOString()\n    })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 228,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('BullMQ worker initialized with type-safe job processing')"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 231,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize type-safe BullMQ worker', { error: err })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 235,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('In-memory job processor initialized', { event: 'in_memory_processor_initialized', timestamp: new Date().toISOString() })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 312,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error in job processor for task ${data.taskId}: ${errorMessage}`, {\n      originalError: err,\n      taskId: data.taskId\n    })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 351,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Job ${job.id} completed`)"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 357,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Job ${jobId} failed: ${err.message}`, { error: err })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 362,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize job queue: ' + errorMessage)"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 543,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error retrying job ${jobId}: ${errorMessage}`, {\n      event: 'retry_job_error',\n      jobId,\n      errorMessage,\n      stack: errorStack,\n      timestamp: new Date().toISOString()\n    })"
    },
    {
      "fileName": "src/services/jobQueue.ts",
      "line": 563,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error cleaning up completed jobs: ' + (err instanceof Error ? err.message : String(err)), {\n      event: 'cleanup_completed_jobs_error',\n      originalError: err, // Include the original error object\n      timestamp: new Date().toISOString(),\n    })"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 20,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'job_queue_system_initializing',\n        timestamp: new Date().toISOString(),\n      },\n      'Initializing job queue system...'\n    )"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 37,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'job_queue_system_initialized',\n        timestamp: new Date().toISOString(),\n      },\n      'Job queue system initialized successfully'\n    )"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 54,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'job_queue_system_init_error',\n        errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      `Error initializing job queue system: ${errorMessage}`\n    )"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 70,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'job_queue_system_shutting_down',\n        timestamp: new Date().toISOString(),\n      },\n      'Shutting down job queue system...'\n    )"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 79,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'job_queue_system_shutdown_complete',\n        timestamp: new Date().toISOString(),\n      },\n      'Job queue system shutdown complete'\n    )"
    },
    {
      "fileName": "src/services/jobQueueSystem.ts",
      "line": 96,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'job_queue_system_shutdown_error',\n        errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      `Error shutting down job queue system: ${errorMessage}`\n    )"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 31,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Initializing KMS encryption service', {\n      region: options.region,\n      keyId: options.keyId ? '***' : 'not provided',\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 43,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize KMS encryption service', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 65,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Encrypting data', {\n      keyId: options.keyId ? '***' : 'default',\n      dataLength: typeof data === 'string' ? data.length : data.byteLength,\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 77,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to encrypt data', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 99,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Decrypting data', {\n      keyId: options.keyId ? '***' : 'default',\n      dataLength: data.byteLength,\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 111,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to decrypt data', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 134,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Generating data key', {\n      keyId: options.keyId ? '***' : 'default',\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 148,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to generate data key', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 172,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Re-encrypting data', {\n      sourceKeyId: '***',\n      destinationKeyId: '***',\n      dataLength: data.byteLength,\n    })"
    },
    {
      "fileName": "src/services/kmsEncryptionService.ts",
      "line": 185,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to re-encrypt data', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 40,
      "column": 7,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn('SendGrid API key not provided; email functionality is disabled')"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 44,
      "column": 5,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('SendGrid mailer service initialized successfully')"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 46,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Failed to initialize mailer service:', error)"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 105,
      "column": 5,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Email sent successfully. Log ID: ${logId}`)"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 134,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Failed to send email:', error)"
    },
    {
      "fileName": "src/services/mailerService.ts",
      "line": 177,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Failed to get email logs for workflow ${workflowId}:`, error)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 77,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Initializing migration service')"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 80,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Migration service initialized')"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 82,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize migration service', {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 96,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Registered migration: ${migration.name}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 124,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Ensured migrations table exists: ${this.options.migrationTableName}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 126,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to create migrations table', {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 147,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to check migration status for ${id}`, {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 184,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Recorded migration ${migration.name} as ${status}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 186,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to record migration ${migration.name}`, {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 209,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get applied migrations', {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 231,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to get pending migrations', {\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 252,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('No pending migrations to apply')"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 256,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Running ${pendingMigrations.length} pending migrations`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 264,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Applying migration: ${migration.name}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 269,
      "column": 11,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Migration applied successfully: ${migration.name}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 273,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration failed: ${migration.name}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 278,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration failed with error: ${migration.name}`, {\n          error: errorMessage,\n          stack: err instanceof Error ? err.stack : undefined,\n        })"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 304,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Migration process stopped due to failure in ${migration.name}`)"
    },
    {
      "fileName": "src/services/migrationService.ts",
      "line": 312,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Migration process completed: ${appliedCount} applied, ${failedCount} failed`)"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 54,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Monitoring is disabled by configuration')"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 68,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Monitoring service initialized: Sentry=${sentryInitialized}, DataDog=${datadogInitialized}`)"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 80,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize monitoring service:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 129,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to send critical error alert:',\n          isError(alertError) ? alertError : String(alertError)\n        )"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 155,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to track error:', isError(trackError) ? trackError : String(trackError))"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 204,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to send error rate alert:',\n          isError(alertError) ? alertError : String(alertError)\n        )"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 212,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Slow API response: ${method} ${path} took ${durationMs}ms`)"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 228,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to track API request:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 248,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Slow database query: ${operation} on ${table} took ${durationMs}ms`)"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 264,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to track database query:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 281,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`System resource tracking started with interval of ${intervalMs}ms`)"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 299,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Monitoring service shut down successfully')"
    },
    {
      "fileName": "src/services/monitoringService.ts",
      "line": 301,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error shutting down monitoring service:', isError(err) ? err : String(err))"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 84,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Initializing OpenAI service')"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 93,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize OpenAI service', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 113,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Running OpenAI completion', {\n      model: params.model || 'default',\n      promptLength: params.prompt.length,\n      maxTokens: params.maxTokens,\n      temperature: params.temperature,\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 136,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to run OpenAI completion', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 156,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Running OpenAI chat completion', {\n      model: params.model || 'default',\n      messageCount: params.messages.length,\n      maxTokens: params.maxTokens,\n      temperature: params.temperature,\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 182,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to run OpenAI chat completion', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 204,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Generating embeddings', {\n      model: model || 'default',\n      textLength: text.length,\n    })"
    },
    {
      "fileName": "src/services/openai.ts",
      "line": 216,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to generate embeddings', {\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 108,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug('Performance metrics collected')"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 110,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error collecting performance metrics:', err)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 157,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error storing metrics in database:', err)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 179,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error checking if table exists:', err)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 205,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Created ${PERFORMANCE_METRICS_TABLE} table`)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 207,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error creating metrics table:', err)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 221,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error cleaning up old metrics:', err)"
    },
    {
      "fileName": "src/services/performanceMonitor.ts",
      "line": 235,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Performance monitoring started')"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 83,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'queue_manager_initialized',\n          timestamp: new Date().toISOString(),\n        },\n        'Queue manager initialized with Redis'\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 93,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'in_memory_queue_manager_initialized',\n          timestamp: new Date().toISOString(),\n        },\n        'Queue manager initialized in in-memory mode'\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 103,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'queue_manager_init_error',\n        errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      `Error initializing queue manager: ${errorMessage}`\n    )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 183,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n    {\n      event: 'in_memory_job_processing',\n      jobId: job.id,\n      queueName: job.queueName,\n      jobName: job.jobName,\n      timestamp: new Date().toISOString(),\n    },\n    `Processing in-memory job ${job.id} (${job.jobName}) in queue ${job.queueName}`\n  )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 243,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'job_added',\n          jobId,\n          queueName,\n          jobName,\n          timestamp: new Date().toISOString(),\n        },\n        `Added job ${jobId} (${jobName}) to queue ${queueName}`\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 269,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'in_memory_job_added',\n          jobId,\n          queueName,\n          jobName,\n          timestamp: new Date().toISOString(),\n        },\n        `Added in-memory job ${jobId} (${jobName}) to queue ${queueName}`\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 296,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'add_job_error',\n        queueName,\n        jobName,\n        errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      `Error adding job to queue ${queueName}: ${errorMessage}`\n    )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 360,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'repeated_job_added',\n          jobId,\n          queueName,\n          jobName,\n          pattern,\n          timestamp: new Date().toISOString(),\n        },\n        `Added repeatable job ${jobId} (${jobName}) to queue ${queueName} with pattern ${pattern}`\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 388,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'in_memory_repeated_job_added',\n          jobId,\n          queueName,\n          jobName,\n          pattern,\n          timestamp: new Date().toISOString(),\n        },\n        `Added in-memory repeatable job ${jobId} (${jobName}) to queue ${queueName} with pattern ${pattern}`\n      )"
    },
    {
      "fileName": "src/services/queueManager.ts",
      "line": 416,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'add_repeated_job_error',\n        queueName,\n        jobName,\n        pattern,\n        errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      `Error adding repeatable job to queue ${queueName}: ${errorMessage}`\n    )"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 74,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Unknown role: ${role}, defaulting to readonly`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 102,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Unknown role: ${role}, defaulting to readonly`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 132,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`API key not found or inactive: ${apiKeyId}`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 137,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`API key expired: ${apiKeyId}`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 150,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Permission denied for API key ${apiKeyId}: ${resource}:${action}`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 161,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Failed to check API key permission: ${errorMessage}`, {\n      event: 'api_key_permission_check_error',\n      error: errorMessage,\n      apiKeyId,\n      resource,\n      action,\n    })"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 195,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Invalid role: ${role}`)"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 213,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      `Updated permissions for API key ${apiKeyId}`,\n      {\n        event: 'api_key_permissions_updated',\n        apiKeyId,\n        role,\n        hasCustomPermissions: !!customPermissions,\n      }\n    )"
    },
    {
      "fileName": "src/services/rbacService.ts",
      "line": 230,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      `Failed to update API key permissions: ${errorMessage}`,\n      {\n        event: 'api_key_permissions_update_error',\n        error: errorMessage,\n        apiKeyId,\n        role,\n      }\n    )"
    },
    {
      "fileName": "src/services/redisHealthCheck.ts",
      "line": 76,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Redis health check error', {\n      error: errorMessage,\n      stack: err instanceof Error ? err.stack : undefined,\n    })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 82,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('🔄 Initializing Redis service', {\n        event: 'redis_service_initializing',\n        timestamp: new Date().toISOString(),\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 99,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('⚙️ Redis configuration loaded', {\n          event: 'redis_config_loaded',\n          timestamp: new Date().toISOString(),\n          host: this.options.host,\n          port: this.options.port,\n          db: this.options.db,\n          tls: this.options.tls,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 108,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('⚙️ Using default Redis configuration', {\n          event: 'redis_using_default_config',\n          timestamp: new Date().toISOString(),\n          host: this.options.host,\n          port: this.options.port,\n          db: this.options.db,\n          tls: this.options.tls,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 120,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('📦 Importing ioredis module', {\n          event: 'redis_importing_module',\n          timestamp: new Date().toISOString(),\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 128,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('✅ ioredis module imported successfully', {\n          event: 'redis_module_imported',\n          timestamp: new Date().toISOString(),\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 133,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('ioredis module not found, falling back to in-memory mode', {\n          event: 'redis_module_import_failed',\n          timestamp: new Date().toISOString(),\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 144,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Redis service initialization ${connected ? 'completed' : 'failed'} in ${durationMs}ms`, {\n          event: 'redis_service_init_result',\n          timestamp: new Date().toISOString(),\n          durationMs,\n          connected,\n          inMemoryMode: this.inMemoryMode,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 155,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Redis service running in in-memory mode', {\n        event: 'redis_in_memory_mode',\n        timestamp: new Date().toISOString(),\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 163,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize Redis service', {\n        event: 'redis_service_init_error',\n        timestamp: new Date().toISOString(),\n        durationMs,\n        error: isError(err) ? err.message : String(err),\n        stack: isError(err) ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 188,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('🔌 Connecting to Redis server', {\n        event: 'redis_connecting',\n        timestamp: new Date().toISOString(),\n        host: this.options.host,\n        port: this.options.port,\n        tls: this.options.tls,\n        db: this.options.db,\n        connectionTimeout: this.options.connectionTimeout,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 214,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug('🔄 Redis event handlers registered', {\n        event: 'redis_event_handlers_registered',\n        timestamp: new Date().toISOString(),\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 220,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('⏳ Waiting for Redis connection (timeout: ' + this.options.connectionTimeout + 'ms)', {\n        event: 'redis_waiting_for_connection',\n        timestamp: new Date().toISOString(),\n        timeoutMs: this.options.connectionTimeout,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 231,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('✅ Connected to Redis in ' + totalDuration + 'ms', {\n          event: 'redis_connection_successful',\n          timestamp: new Date().toISOString(),\n          durationMs: totalDuration,\n          host: this.options.host,\n          port: this.options.port,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 239,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('⏱️ Redis connection timed out after ' + totalDuration + 'ms', {\n          event: 'redis_connection_timeout',\n          timestamp: new Date().toISOString(),\n          durationMs: totalDuration,\n          host: this.options.host,\n          port: this.options.port,\n          timeoutMs: this.options.connectionTimeout,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 253,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('❌ Failed to connect to Redis', {\n        event: 'redis_connection_error',\n        timestamp: new Date().toISOString(),\n        durationMs: totalDuration,\n        host: this.options.host,\n        port: this.options.port,\n        error: isError(err) ? err.message : String(err),\n        stack: err instanceof Error ? err.stack : undefined,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 277,
      "column": 11,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Redis connection timeout')"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 301,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Connected to Redis')"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 310,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Redis error', {\n      error: err.message,\n      stack: err.stack,\n    })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 323,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Disconnected from Redis')"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 338,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Max reconnect attempts reached, giving up', {\n        event: 'redis_max_reconnect_attempts',\n        timestamp: new Date().toISOString(),\n        timeoutMs: this.options.maxReconnectDelay,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 354,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Scheduling Redis reconnect attempt ${this.reconnectAttempts} in ${delay}ms`, {\n      event: 'redis_reconnect_scheduled',\n      timestamp: new Date().toISOString(),\n      interval: delay,\n    })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 363,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Reconnect attempt failed', {\n          event: 'redis_reconnect_failed',\n          timestamp: new Date().toISOString(),\n          durationMs: delay,\n          host: this.options.host,\n          port: this.options.port,\n          error: isError(err) ? err.message : String(err),\n          attempt: this.reconnectAttempts,\n        })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 389,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Redis health check started with interval ${this.options.healthCheckInterval}ms`)"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 413,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Redis health check: OK (${latency}ms)`, {\n        event: 'redis_health_check',\n        timestamp: new Date().toISOString(),\n        durationMs: latency,\n        host: this.options.host,\n        port: this.options.port,\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 422,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Redis health check failed', {\n        event: 'redis_health_check_failed',\n        timestamp: new Date().toISOString(),\n        host: this.options.host,\n        port: this.options.port,\n        error: isError(err) ? err.message : String(err),\n      })"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 483,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Redis connection closed')"
    },
    {
      "fileName": "src/services/redisService.ts",
      "line": 485,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error closing Redis connection', {\n          error: isError(err) ? err.message : String(err),\n        })"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 62,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Stored results to ${filePath}`)"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 95,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Found duplicate report: ${report.id}`)"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 128,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Stored report source: ${sourceId}`)"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 153,
      "column": 5,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Using existing report: ${duplicateId}`)"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 170,
      "column": 3,
      "callType": "console",
      "methodName": "log",
      "code": "console.log(`Stored report data: ${reportId}`)"
    },
    {
      "fileName": "src/services/resultsPersistence.ts",
      "line": 236,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error storing results:', error)"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 38,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      { event: 'scheduler_service_init', timestamp: new Date().toISOString() },\n      'Initializing scheduler service'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 44,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'scheduler_service_enabled_count',\n        count: enabledSchedules.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Found enabled schedules count'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 58,
      "column": 11,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n            {\n              event: 'schedule_invalid_cron',\n              scheduleId: schedule.id,\n              cron: schedule.cron,\n              timestamp: new Date().toISOString(),\n            },\n            'Invalid cron expression for schedule'\n          )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 82,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n          {\n            event: 'schedule_service_start_failed',\n            scheduleId: schedule.id,\n            errorMessage,\n            stack: err instanceof Error ? err.stack : undefined,\n            timestamp: new Date().toISOString(),\n          },\n          'Failed to start schedule'\n        )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 97,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(\n        {\n          event: 'scheduler_service_startup_errors',\n          errors: startupErrors,\n          timestamp: new Date().toISOString(),\n        },\n        `Scheduler initialized with startup errors`\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 106,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        { event: 'scheduler_service_init_complete', timestamp: new Date().toISOString() },\n        'Scheduler initialized successfully'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 113,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'scheduler_service_init_error',\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error initializing scheduler service'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 162,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_create_error',\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error creating schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 186,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_get_error',\n        scheduleId,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error getting schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 207,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_list_error',\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error listing schedules'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 269,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_update_error',\n        scheduleId,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error updating schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 299,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_delete_error',\n        scheduleId,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error deleting schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 321,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'schedule_service_start_schedule',\n        scheduleId: schedule.id,\n        cron: schedule.cron,\n        timestamp: new Date().toISOString(),\n      },\n      'Starting schedule with cron'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 337,
      "column": 20,
      "callType": "other",
      "methodName": "unknown",
      "code": "cron.schedule(\n        schedule.cron,\n        async () => {\n          try {\n            await executeScheduledWorkflow(schedule);\n          } catch (executionError) {\n            error(\n              {\n                event: 'schedule_service_execute_error',\n                scheduleId: schedule.id,\n                errorMessage: getErrorMessage(executionError),\n                stack: executionError instanceof Error ? executionError.stack : undefined,\n                timestamp: new Date().toISOString(),\n              },\n              'Error executing scheduled workflow'\n            );\n            // Log error but don't kill the scheduler\n          }\n        },\n        options\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 343,
      "column": 13,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n              {\n                event: 'schedule_service_execute_error',\n                scheduleId: schedule.id,\n                errorMessage: getErrorMessage(executionError),\n                stack: executionError instanceof Error ? executionError.stack : undefined,\n                timestamp: new Date().toISOString(),\n              },\n              'Error executing scheduled workflow'\n            )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 360,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'schedule_service_start_schedule_success',\n          scheduleId: schedule.id,\n          timestamp: new Date().toISOString(),\n        },\n        'Schedule started successfully'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 369,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n        {\n          event: 'schedule_service_start_schedule_error',\n          scheduleId: schedule.id,\n          errorMessage: getErrorMessage(cronError),\n          stack: cronError instanceof Error ? cronError.stack : undefined,\n          timestamp: new Date().toISOString(),\n        },\n        'Failed to create cron job for schedule'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 391,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_start_error',\n        scheduleId: schedule.id,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error starting schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 411,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'schedule_service_stop_schedule',\n          scheduleId,\n          timestamp: new Date().toISOString(),\n        },\n        'Stopping schedule'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 421,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'schedule_service_stop_schedule_success',\n          scheduleId,\n          timestamp: new Date().toISOString(),\n        },\n        'Schedule stopped successfully'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 432,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_stop_error',\n        scheduleId,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error stopping schedule'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 450,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'schedule_service_execute_workflow',\n        scheduleId: schedule.id,\n        workflowId: schedule.workflowId!,\n        timestamp: new Date().toISOString(),\n      },\n      'Executing scheduled workflow'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 486,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n        {\n          event: 'schedule_service_task_log_insert_error',\n          scheduleId: schedule.id,\n          workflowId: schedule.workflowId!,\n          errorMessage: getErrorMessage(insertError),\n          stack: insertError instanceof Error ? insertError.stack : undefined,\n          timestamp: new Date().toISOString(),\n        },\n        'Error inserting task log, trying alternative approach'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 514,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n          {\n            event: 'schedule_service_task_log_insert_error_second_attempt',\n            scheduleId: schedule.id,\n            workflowId: schedule.workflowId!,\n            errorMessage: getErrorMessage(secondError),\n            stack: secondError instanceof Error ? secondError.stack : undefined,\n            timestamp: new Date().toISOString(),\n          },\n          'Second attempt at inserting task log failed'\n        )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 530,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'schedule_service_execute_workflow_queued',\n        scheduleId: schedule.id,\n        workflowId: schedule.workflowId!,\n        taskId,\n        timestamp: new Date().toISOString(),\n      },\n      'Scheduled workflow execution queued'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 542,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_execute_workflow_error',\n        scheduleId: schedule.id,\n        workflowId: schedule.workflowId!,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error executing scheduled workflow'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 568,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'schedule_service_execute_workflow_skip',\n          workflowId,\n          timestamp: new Date().toISOString(),\n        },\n        'Workflow is already running or locked, skipping execution'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 580,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'schedule_service_execute_workflow_result',\n        workflowId,\n        status: result.status,\n        timestamp: new Date().toISOString(),\n      },\n      'Scheduled workflow executed'\n    )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 591,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n        {\n          event: 'schedule_service_execute_workflow_continue',\n          workflowId,\n          currentStep: result.currentStep,\n          timestamp: new Date().toISOString(),\n        },\n        'Workflow is paused, continuing execution'\n      )"
    },
    {
      "fileName": "src/services/schedulerService.ts",
      "line": 604,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(\n      {\n        event: 'schedule_service_execute_workflow_by_id_error',\n        workflowId,\n        errorMessage,\n        stack: err instanceof Error ? err.stack : undefined,\n        timestamp: new Date().toISOString(),\n      },\n      'Error executing workflow'\n    )"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 45,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Initializing security services')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 49,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Running database migrations')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 52,
      "column": 9,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Database migrations completed successfully')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 55,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'migrations_error',\n          err: errorMessage,\n        }, `Failed to run database migrations: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 74,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('KMS service initialization failed, using fallback encryption')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 87,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('KMS encryption initialization failed, using fallback encryption')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 104,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Key rotation initialization failed')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 117,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Security monitoring initialization failed')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 120,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Security services initialization completed')"
    },
    {
      "fileName": "src/services/securityInitializer.ts",
      "line": 124,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'security_initialization_error',\n      err: errorMessage,\n    }, `Failed to initialize security services: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 66,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Security monitoring is disabled')"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 72,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Invalid cron schedule: ${securityMonitoringConfig.schedule}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 82,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n          event: 'security_monitoring_error',\n          err: errorMessage,\n        }, `Scheduled security monitoring failed: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 90,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info({\n      event: 'security_monitoring_initialized',\n      enabled: securityMonitoringConfig.enabled,\n      schedule: securityMonitoringConfig.schedule,\n      timeWindowMinutes: securityMonitoringConfig.timeWindowMinutes,\n    }, 'Security monitoring service initialized')"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 100,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'security_monitoring_initialization_error',\n      err: errorMessage,\n    }, `Failed to initialize security monitoring service: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 114,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug('Running security event check')"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 132,
      "column": 5,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug('Security event check completed')"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 135,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'security_event_check_error',\n      err: errorMessage,\n    }, `Failed to check security events: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 168,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n          event: 'security_alert_failed_logins',\n          ipAddress: ip.ipAddress,\n          count: ip.count,\n          threshold: securityMonitoringConfig.alertThresholds.failedLogins,\n          timeWindowMinutes: securityMonitoringConfig.timeWindowMinutes,\n        }, `Security Alert: Excessive failed login attempts from IP ${ip.ipAddress}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 182,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'failed_logins_check_error',\n      err: errorMessage,\n    }, `Failed to check for failed logins: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 215,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n          event: 'security_alert_api_key_creation',\n          userId: user.userId,\n          count: user.count,\n          threshold: securityMonitoringConfig.alertThresholds.apiKeyCreation,\n          timeWindowMinutes: securityMonitoringConfig.timeWindowMinutes,\n        }, `Security Alert: Excessive API key creation by user ${user.userId}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 228,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'api_key_creation_check_error',\n      err: errorMessage,\n    }, `Failed to check for API key creation: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 261,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n          event: 'security_alert_permission_denied',\n          userId: user.userId,\n          count: user.count,\n          threshold: securityMonitoringConfig.alertThresholds.permissionDenied,\n          timeWindowMinutes: securityMonitoringConfig.timeWindowMinutes,\n        }, `Security Alert: Excessive permission denied events for user ${user.userId}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 274,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'permission_denied_check_error',\n      err: errorMessage,\n    }, `Failed to check for permission denied events: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 303,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn({\n        event: 'security_alert_encryption_failures',\n        count: encryptionFailures[0].count,\n        threshold: securityMonitoringConfig.alertThresholds.encryptionFailures,\n        timeWindowMinutes: securityMonitoringConfig.timeWindowMinutes,\n      }, `Security Alert: Excessive encryption failures detected`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 314,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error({\n      event: 'encryption_failures_check_error',\n      err: errorMessage,\n    }, `Failed to check for encryption failures: ${errorMessage}`)"
    },
    {
      "fileName": "src/services/securityMonitoringService.ts",
      "line": 328,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Security monitoring service stopped')"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 44,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Sentry DSN not provided, error tracking disabled')"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 65,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Sentry initialized successfully')"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 69,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize Sentry', {\n      event: 'sentry_init_error',\n      error: caughtError.message,\n      stack: caughtError.stack\n    })"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 116,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Error captured in Sentry with ID: ${eventId}`, {\n      event: 'sentry_capture',\n      errorId: eventId,\n      statusCode: appError.statusCode,\n      isOperational: appError.isOperational\n    })"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 126,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to capture error in Sentry', {\n      event: 'sentry_capture_error',\n      error: caughtError.message,\n      stack: caughtError.stack\n    })"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 167,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to capture message in Sentry', {\n      event: 'sentry_message_error',\n      error: errorObj.message,\n      stack: errorObj.stack\n    })"
    },
    {
      "fileName": "src/services/sentryService.ts",
      "line": 199,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Error flushing Sentry events', {\n      event: 'sentry_flush_error',\n      error: caughtError.message,\n      stack: caughtError.stack\n    })"
    },
    {
      "fileName": "src/services/stepHandlers.ts",
      "line": 28,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock emailHandler', { config, context })"
    },
    {
      "fileName": "src/services/stepHandlers.ts",
      "line": 47,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock httpHandler', { config, context })"
    },
    {
      "fileName": "src/services/stepHandlers.ts",
      "line": 67,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock dataProcessingHandler', { config, context })"
    },
    {
      "fileName": "src/services/stepHandlers.ts",
      "line": 86,
      "column": 3,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('[STUB] Using mock delayHandler', { config, context })"
    },
    {
      "fileName": "src/services/workflowEmailServiceFixed.ts",
      "line": 34,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Sending workflow completion email', {\n      workflowId,\n      recipients: recipients || 'default recipients',\n    })"
    },
    {
      "fileName": "src/services/workflowEmailServiceFixed.ts",
      "line": 50,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to send workflow completion email', {\n      workflowId,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/workflowEmailServiceFixed.ts",
      "line": 80,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Configuring workflow email notifications', {\n      workflowId,\n      recipients: options.recipientEmail,\n    })"
    },
    {
      "fileName": "src/services/workflowEmailServiceFixed.ts",
      "line": 95,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to configure workflow email notifications', {\n      workflowId,\n      error: err instanceof Error ? err.message : String(err),\n    })"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 44,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'workflow_created',\n        workflowId: workflow.id,\n        stepsCount: stepsWithIds.length,\n        timestamp: new Date().toISOString(),\n      },\n      'Workflow created'\n    )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 55,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error creating workflow:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 142,
      "column": 15,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(\n                {\n                  event: 'email_completion_sending',\n                  workflowId,\n                  recipients,\n                  timestamp: new Date().toISOString(),\n                },\n                'Sending workflow completion email'\n              )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 170,
      "column": 15,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(\n                {\n                  event: 'email_completion_sending',\n                  workflowId,\n                  recipients,\n                  timestamp: new Date().toISOString(),\n                },\n                'Sending workflow completion email'\n              )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 182,
      "column": 13,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n              {\n                event: 'email_completion_sent',\n                workflowId,\n                messageId: emailResult.message,\n                timestamp: new Date().toISOString(),\n              },\n              'Workflow completion email sent'\n            )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 195,
      "column": 9,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Failed to send completion email for workflow ${workflowId}:`, emailError)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 206,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(\n        {\n          event: 'step_execution_start',\n          workflowId,\n          stepIndex: currentStepIndex + 1,\n          totalSteps: steps.length,\n          stepName: currentStep.name,\n          timestamp: new Date().toISOString(),\n        },\n        'Executing workflow step'\n      )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 246,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error(`Error executing step ${currentStepIndex + 1}/${steps.length}:`, err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 307,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error running workflow:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 330,
      "column": 7,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error unlocking workflow:', unlockError)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 346,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting workflow:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 380,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error listing workflows:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 402,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error resetting workflow:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 414,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error deleting workflow:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 447,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error getting workflows:', err)"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 494,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(\n      {\n        event: 'workflow_notification_configured',\n        workflowId,\n        recipientEmail,\n        timestamp: new Date().toISOString(),\n      },\n      'Configured workflow notifications'\n    )"
    },
    {
      "fileName": "src/services/workflowService.ts",
      "line": 505,
      "column": 5,
      "callType": "console",
      "methodName": "error",
      "code": "console.error('Error configuring workflow notifications:', err)"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 78,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Using DATABASE_URL for database connection')"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 98,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Using PostgreSQL environment variables for database connection')"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 121,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Connecting to database: ${maskedConnectionString}`)"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 133,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug('PostgreSQL notice', {\n        event: 'postgres_notice',\n        message: notice.message,\n        severity: notice.severity,\n      })"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 166,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Closing database connection')"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 168,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info('Database connection closed')"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 170,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Database connection close error', {\n      event: 'database_close_error',\n      error: isError(err) ? err.message : String(err),\n      stack: isError(err) ? err.stack : undefined,\n    })"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 180,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info('SIGINT received, closing database connection')"
    },
    {
      "fileName": "src/shared/db.ts",
      "line": 186,
      "column": 3,
      "callType": "direct",
      "methodName": "info",
      "code": "info('SIGTERM received, closing database connection')"
    },
    {
      "fileName": "src/shared/middleware/rateLimiter.ts",
      "line": 45,
      "column": 7,
      "callType": "object",
      "methodName": "warn",
      "code": "logger.warn(`Rate limit exceeded for ${req.ip} on ${req.method} ${req.path}`, {\n        ip: req.ip,\n        method: req.method,\n        path: req.path,\n        headers: req.headers,\n        rateLimitConfig: {\n          windowMs: options.windowMs,\n          max: options.max,\n        },\n      })"
    },
    {
      "fileName": "src/shared/middleware/rbacMiddleware.ts",
      "line": 78,
      "column": 9,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Admin access granted in development mode')"
    },
    {
      "fileName": "src/shared/middleware/rbacMiddleware.ts",
      "line": 90,
      "column": 7,
      "callType": "console",
      "methodName": "warn",
      "code": "console.warn('Permission checking for user roles not fully implemented')"
    },
    {
      "fileName": "src/shared/middleware/rbacMiddleware.ts",
      "line": 105,
      "column": 7,
      "callType": "object",
      "methodName": "error",
      "code": "logger.error({\n        event: 'permission_check_error',\n        err: errorMessage,\n        resource,\n        action,\n        method: req.method,\n        path: req.path,\n      }, `Permission check err: ${errorMessage}`)"
    },
    {
      "fileName": "src/shared/middleware/rbacMiddleware.ts",
      "line": 146,
      "column": 7,
      "callType": "console",
      "methodName": "log",
      "code": "console.log('Admin access granted in development mode')"
    },
    {
      "fileName": "src/shared/middleware/rbacMiddleware.ts",
      "line": 171,
      "column": 5,
      "callType": "object",
      "methodName": "error",
      "code": "logger.error({\n      event: 'admin_check_error',\n      err: errorMessage,\n      method: req.method,\n      path: req.path,\n    }, `Admin check err: ${errorMessage}`)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 154,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error getting circuit state for ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 186,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error updating circuit state for ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 191,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Circuit ${this.name} state changed from ${currentState} to ${newState}`)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 227,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error recording success for circuit ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 275,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error recording failure for circuit ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 293,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error getting last failure for circuit ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 322,
      "column": 9,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Error resetting circuit ${this.name}:`, err)"
    },
    {
      "fileName": "src/utils/circuitBreaker.ts",
      "line": 325,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Circuit ${this.name} has been reset to CLOSED state`)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 38,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Using default encryption key. This is NOT secure for production.')"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 56,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to initialize encryption:', err)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 125,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Encryption err: ${errorMessage}`)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 173,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Decryption err: ${errorMessage}`)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 207,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to decrypt legacy data:', err)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 262,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Security event logging err: ${errorMessage}`)"
    },
    {
      "fileName": "src/utils/encryption.ts",
      "line": 290,
      "column": 5,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Encryption test failed:', err)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 129,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Missing required environment variables: ${result.missing.join(', ')}`)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 132,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Using default values for: ${result.usingDefaults.join(', ')}`)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 135,
      "column": 5,
      "callType": "other",
      "methodName": "unknown",
      "code": "logSecurityEvent(\n      'env_validation_failed',\n      undefined,\n      {\n        environment: nodeEnv,\n        missing: result.missing,\n        usingDefaults: result.usingDefaults,\n      },\n      'critical'\n    ).catch((err) => {\n      error('Failed to log security event:', err);\n    })"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 145,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Failed to log security event:', err)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 149,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error('Exiting due to missing or default environment variables in production')"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 155,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Recommended environment variables not set: ${result.recommendations.join(', ')}`)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 176,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Required environment variable ${key} is not set`)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 186,
      "column": 7,
      "callType": "direct",
      "methodName": "error",
      "code": "error(`Environment variable ${key} is using a default value in production`)"
    },
    {
      "fileName": "src/utils/envValidator.ts",
      "line": 189,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Environment variable ${key} is using a default value`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 53,
      "column": 5,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Rate limiter \"${name}\" created: ${this.maxRequests} requests per ${this.windowMs}ms`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 87,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Rate limit for \"${this.name}\" reached, waiting...`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 108,
      "column": 7,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Rate limiter \"${this.name}\" paused: ${reason}`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 117,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Rate limiter \"${this.name}\" resumed`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 167,
      "column": 7,
      "callType": "direct",
      "methodName": "debug",
      "code": "debug(`Resolving ${toResolve.length} waiting requests for \"${this.name}\"`)"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 177,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('IMAP rate limit reached, throttling requests')"
    },
    {
      "fileName": "src/utils/rateLimiter.ts",
      "line": 184,
      "column": 5,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn('Email processing rate limit reached, throttling processing')"
    },
    {
      "fileName": "src/utils/retry.ts",
      "line": 78,
      "column": 9,
      "callType": "direct",
      "methodName": "warn",
      "code": "warn(`Retry operation exceeded maximum time of ${maxRetryTime}ms`)"
    },
    {
      "fileName": "src/utils/retry.ts",
      "line": 89,
      "column": 7,
      "callType": "direct",
      "methodName": "info",
      "code": "info(`Retry attempt ${attempt}/${retries} after ${delay}ms delay`, {\n        err:\n          err instanceof Error\n            ? err instanceof Error\n              ? err instanceof Error\n                ? (err instanceof Error ? (err instanceof Error ? err.message : String(err)) : String(err))\n                : String(err)\n              : String(err)\n            : String(err),\n        attempt,\n        delay,\n      })"
    }
  ]
}