name: Coverage Report

on:
  push:
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  generate-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "TEST_DATABASE_URL=postgresql://test:test@localhost:5432/test_db" >> .env.test
          echo "TEST_REDIS_URL=redis://localhost:6379/1" >> .env.test
          echo "JWT_SECRET=test-jwt-secret" >> .env.test
          echo "ENCRYPTION_KEY=01234567890123456789012345678901" >> .env.test
          echo "LOG_LEVEL=error" >> .env.test
          echo "LOG_FORMAT=json" >> .env.test

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Generate detailed coverage report
        run: |
          # Create a more detailed HTML report
          mkdir -p coverage-report
          
          # Copy the HTML coverage report
          cp -r coverage/html/* coverage-report/
          
          # Generate summary markdown file
          echo "# Test Coverage Report" > coverage-report/summary.md
          echo "Generated on $(date)" >> coverage-report/summary.md
          echo "" >> coverage-report/summary.md
          
          # Extract coverage data
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            let markdown = '## Overall Coverage\n\n';
            markdown += '| Category | Coverage | Threshold |\n';
            markdown += '|----------|----------|----------|\n';
            
            // Get thresholds from vitest.config.ts
            const configFile = fs.readFileSync('./vitest.config.ts', 'utf8');
            const statementsThreshold = configFile.match(/statements: (\d+)/)[1];
            const branchesThreshold = configFile.match(/branches: (\d+)/)[1];
            const functionsThreshold = configFile.match(/functions: (\d+)/)[1];
            const linesThreshold = configFile.match(/lines: (\d+)/)[1];
            
            markdown += `| Statements | ${total.statements.pct}% | ${statementsThreshold}% |\n`;
            markdown += `| Branches | ${total.branches.pct}% | ${branchesThreshold}% |\n`;
            markdown += `| Functions | ${total.functions.pct}% | ${functionsThreshold}% |\n`;
            markdown += `| Lines | ${total.lines.pct}% | ${linesThreshold}% |\n\n`;
            
            markdown += '## Files with Low Coverage\n\n';
            markdown += '| File | Statements | Branches | Functions | Lines |\n';
            markdown += '|------|------------|----------|-----------|-------|\n';
            
            // Find files with coverage below thresholds
            const lowCoverageFiles = [];
            for (const file in coverage) {
              if (file === 'total') continue;
              
              const fileCoverage = coverage[file];
              if (fileCoverage.statements.pct < statementsThreshold || 
                  fileCoverage.branches.pct < branchesThreshold ||
                  fileCoverage.functions.pct < functionsThreshold ||
                  fileCoverage.lines.pct < linesThreshold) {
                lowCoverageFiles.push({
                  file,
                  statements: fileCoverage.statements.pct,
                  branches: fileCoverage.branches.pct,
                  functions: fileCoverage.functions.pct,
                  lines: fileCoverage.lines.pct
                });
              }
            }
            
            // Sort by line coverage (ascending)
            lowCoverageFiles.sort((a, b) => a.lines - b.lines);
            
            // Add top 10 low coverage files
            const filesToShow = lowCoverageFiles.slice(0, 10);
            for (const file of filesToShow) {
              markdown += `| ${file.file} | ${file.statements}% | ${file.branches}% | ${file.functions}% | ${file.lines}% |\n`;
            }
            
            fs.writeFileSync('coverage-report/summary.md', markdown);
          "

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/
          retention-days: 90

      - name: Deploy coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage-report
          destination_dir: coverage-report
          keep_files: false